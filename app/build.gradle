buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        // These docs use an open ended version so that our plugin
        // can be updated quickly in response to Android tooling updates

        // We recommend changing it to the latest version from our changelog:
        // https://docs.fabric.io/android/changelog.html#fabric-gradle-plugin
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'

apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.jpp.mp"
        minSdkVersion 18
        targetSdkVersion 28
        vectorDrawables.useSupportLibrary = true
        versionCode 3
        versionName "1.5"
        buildConfigField 'String', 'API_KEY', '"eddf6980a6d7dadd72386f55f94ab571"'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions{
        jvmTarget = '1.8'
    }

    sourceSets {
        /*
         * Include test sources that are located in the common project
         */
        test {
            java.srcDirs += getCommonTestResources()
            java.srcDirs += getCommonJunit5TestResources()
        }

        androidTest {
            java.srcDirs += getCommonTestResources()
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // Kotlin standard libs
    implementation deps.kotlin.stdlib

    // Kotlin coroutines
    def kotlinCoroutines = '1.1.1'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutines"

    // appCompat libraries
    def appCompatVersion = "1.0.2"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"

    // ConstraintLayout
    def constraintLayoutVersion = '2.0.0-alpha3'
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.constraintlayout:constraintlayout-solver:$constraintLayoutVersion"

    // Navigation Components
    implementation deps.android.arch.navigation.fragment
    implementation deps.android.arch.navigation.ui

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:2.0.0"
    kapt "androidx.lifecycle:lifecycle-compiler:2.0.0"

    // Paging library
    implementation deps.androidx.paging

    // Dagger
    implementation deps.dagger.dagger
    implementation deps.dagger.android
    kapt deps.dagger.compiler
    kapt deps.dagger.processor

    // image loading library Picasso
    implementation "com.squareup.picasso:picasso:2.5.2"

    // Room persistence
    implementation deps.androidx.room.runtime
    kapt deps.androidx.room.compiler

    // Custom tabs
    implementation "androidx.browser:browser:1.0.0"

    // Crashlytics
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.9@aar') {
        transitive = true
    }

    // Canary
    debugImplementation deps.canary.debug
    debugImplementation deps.canary.fragments
    releaseImplementation deps.canary.release


    implementation project(path: ':mpdomain')
    implementation project(path: ':mpdata')
    implementation project(path: ':common')

    testImplementation deps.test.junit5.jupiter.api         // <-- allows running JUnit5 tests
    testImplementation deps.test.junit5.jupiter.params      // <-- allows running JUnit5 parameterized tests
    testRuntimeOnly deps.test.junit5.jupiter.engine         // <-- allows running JUnit5 tests
    testImplementation deps.test.mockk.unit

    // Core library
    def androidTestLibVersion = '1.1.0'
    def espressoVersion = '3.1.1'
    androidTestImplementation "androidx.test:core:$androidTestLibVersion"
    androidTestImplementation "androidx.test:runner:$androidTestLibVersion"
    androidTestImplementation "androidx.test:rules:$androidTestLibVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidTestLibVersion"
    androidTestImplementation "androidx.test:core:$androidTestLibVersion"
    androidTestImplementation "androidx.arch.core:core-testing:2.0.0"
    androidTestImplementation deps.test.mockk.android
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude module: 'material'
    }
    androidTestImplementation 'com.azimolabs.conditionwatcher:conditionwatcher:0.2'
    androidTestImplementation 'junit:junit:4.12'
}


afterEvaluate {
    project.tasks.withType(Test).forEach { t ->
        t.useJUnitPlatform()    // <-- specify to gradle that we want to run tests on JUnit5 platform
    }
}

