apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.jpp.mp"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        vectorDrawables.useSupportLibrary = true
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        buildConfigField 'String', 'API_KEY', '"eddf6980a6d7dadd72386f55f94ab571"'
        testInstrumentationRunner "com.jpp.mp.MPJUnitRunner"
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions{
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // Kotlin standard libs
    implementation deps.kotlin.stdlib
    // appCompat libraries
    implementation deps.androidx.appcompat

    // Kotlin coroutines
    implementation deps.coroutines.core
    implementation deps.coroutines.android

    // Navigation Components
    implementation deps.android.arch.navigation.fragment
    implementation deps.android.arch.navigation.ui

    // ViewModel and LiveData
    implementation deps.androidx.lifecycle.extensions
    kapt deps.androidx.lifecycle.compiler

    // Dagger
    implementation deps.dagger.dagger
    implementation deps.dagger.android
    kapt deps.dagger.compiler
    kapt deps.dagger.processor

    // image loading library Picasso
    implementation "com.squareup.picasso:picasso:2.5.2"

    // Room persistence
    implementation deps.androidx.room.runtime
    kapt deps.androidx.room.compiler

    // Canary
    debugImplementation deps.canary.debug
    debugImplementation deps.canary.fragments
    releaseImplementation deps.canary.release

    // Support
    implementation project(path: ':mpdesign')
    implementation project(path: ':mpdomain')
    implementation project(path: ':mpdata')
    implementation project(path: ':mpcommon')

    // Features
    implementation project(path: ':features:mpaccount')
    implementation project(path: ':features:mpmoviedetails')
    implementation project(path: ':features:mpsearch')
    implementation project(path: ':features:mpperson')
    implementation project(path: ':features:mpcredits')
    implementation project(path: ':features:mpabout')

    testImplementation deps.test.junit5.jupiter.api         // <-- allows running JUnit5 tests
    testImplementation deps.test.junit5.jupiter.params      // <-- allows running JUnit5 parameterized tests
    testRuntimeOnly deps.test.junit5.jupiter.engine         // <-- allows running JUnit5 tests
    testImplementation deps.test.mockk.unit

    // Include testing utils
    testImplementation project(path: ':mptestutils')

    // BoM needed for Crashlytics
    implementation platform('com.google.firebase:firebase-bom:25.12.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics:17.2.2'
    implementation 'com.google.firebase:firebase-analytics:17.6.0'

    // Core library
    def androidTestLibVersion = '1.1.0'
    def espressoVersion = '3.1.1'
    androidTestImplementation "androidx.test:core:$androidTestLibVersion"
    androidTestImplementation "androidx.test:runner:$androidTestLibVersion"
    androidTestImplementation "androidx.test:rules:$androidTestLibVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidTestLibVersion"
    androidTestImplementation "androidx.test:core:$androidTestLibVersion"
    androidTestImplementation "androidx.arch.core:core-testing:2.0.0"
    androidTestImplementation deps.test.mockk.android
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude module: 'material'
    }
    androidTestImplementation 'com.azimolabs.conditionwatcher:conditionwatcher:0.2'
    androidTestImplementation 'junit:junit:4.12'

    // Include testing utils
    androidTestImplementation project(path: ':mptestutils')

    androidTestImplementation("com.github.tomakehurst:wiremock:2.25.1") {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'asm', module: 'asm'
        exclude group: 'org.json', module: 'json'
    }
    androidTestImplementation 'org.apache.httpcomponents:httpclient-android:4.3.5'
}


afterEvaluate {
    project.tasks.withType(Test).forEach { t ->
        t.useJUnitPlatform()    // <-- specify to gradle that we want to run tests on JUnit5 platform
    }
}

