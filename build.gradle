// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext.versions = [
            'kotlin'   : '1.3.0',
            'junit5'   : [
                    'jupiter' : '5.3.1',
                    'platform': '1.3.1'
            ],
            'hamcrest' : '1.3',
            'pagingLib': '2.1.0-rc01',
            'navigationLib' : '1.0.0-alpha09',
            'dagger' : '2.15',
            'room' : '2.0.0'
    ]

    ext.deps = [
            'android' : [
                    'plugin': 'com.android.tools.build:gradle:3.2.0',
                    'arch' : [
                            'navigation' : [
                                    'safeargs' : "android.arch.navigation:navigation-safe-args-gradle-plugin:${versions.navigationLib}",
                                    'fragment' : "android.arch.navigation:navigation-fragment-ktx:${versions.navigationLib}",
                                    'ui' : "android.arch.navigation:navigation-ui-ktx:${versions.navigationLib}"
                            ]
                    ]
            ],
            'androidx': [
                    'paging': "androidx.paging:paging-runtime-ktx:${versions.pagingLib}",
                    'room': [
                            'runtime' : "androidx.room:room-runtime:${versions.room}",
                            'compiler' : "androidx.room:room-compiler:${versions.room}"
                    ]
            ],
            'kotlin'  : [
                    'plugin': "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}",
                    'stdlib': "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
            ],
            'dagger' : [
                    'dagger' : "com.google.dagger:dagger:${versions.dagger}",
                    'android' : "com.google.dagger:dagger-android-support:${versions.dagger}",
                    'compiler' : "com.google.dagger:dagger-compiler:${versions.dagger}",
                    'processor' : "com.google.dagger:dagger-android-processor:${versions.dagger}"
            ],
            'test'    : [
                    'junit5'  : [
                            'jupiter': [
                                    'api'   : "org.junit.jupiter:junit-jupiter-api:${versions.junit5.jupiter}",
                                    'engine': "org.junit.jupiter:junit-jupiter-engine:${versions.junit5.jupiter}",
                                    'params': "org.junit.jupiter:junit-jupiter-params:${versions.junit5.jupiter}"
                            ]
                    ],
                    'hamcrest': [
                            'integration': "org.hamcrest:hamcrest-integration:${versions.hamcrest}"
                    ],
                    'mockk'   : "io.mockk:mockk:1.8.13.kotlin13"
            ]
    ]

    repositories {
        google()
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath deps.android.plugin
        classpath deps.kotlin.plugin
        classpath deps.android.arch.navigation.safeargs
    }
}


/**
 * Returns sources from common project (only) that are shared between different
 * modules of the application to execute test code.
 */
def getCommonTestResources() {
    return fileFromProjectRoot(':common', 'src', 'test', 'java').absolutePath
}

/**
 * @param projectId the unambiguous id of the project
 * @param path in one of two forms:
 *  <ul>
 *    <li>path the path without the file separator</li>
 *    <li>a single unix-style path</li>
 *  </ul>
 * @return a File object at the path you want
 */
def fileFromProjectRoot(String projectId, String... path) {
    return fileFromProjectRoot(rootProject.project(projectId), path)
}

/**
 * @param p the {@link Project} to use as a base directory
 * @param path the path to add to the project's base directory in one of two forms:
 *  <ul>
 *    <li>path the path without the file separator</li>
 *    <li>a single unix-style path</li>
 *  </ul>
 * @return a {@link File} with the path passed in, starting at the project's
 * base directory
 */
def fileFromProjectRoot(Project p, String... path) {
    return p.file(pathify(path))
}

/**
 * @param path An array of string to be made into a path with the
 * {@link File#separator}
 * @return the path joined by {@link File#separator}
 */
def pathify(String... path) {
    return path.join(File.separator)
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

