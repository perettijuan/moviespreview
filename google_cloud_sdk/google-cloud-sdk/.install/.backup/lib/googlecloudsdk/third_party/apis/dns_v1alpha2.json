{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "dns:v1alpha2",
  "name": "dns",
  "canonicalName": "dns",
  "version": "v1alpha2",
  "revision": "0",
  "title": "Google Cloud DNS API",
  "description": "",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "http://developers.google.com/cloud-dns",
  "protocol": "rest",
  "rootUrl": "https://dns.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://dns.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/cloud-platform.read-only": {
          "description": "View your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/ndev.clouddns.readonly": {
          "description": "View your DNS records hosted by Google Cloud DNS"
        },
        "https://www.googleapis.com/auth/ndev.clouddns.readwrite": {
          "description": "View and manage your DNS records hosted by Google Cloud DNS"
        }
      }
    }
  },
  "schemas": {
    "ResourceRecordSetsListResponse": {
      "id": "ResourceRecordSetsListResponse",
      "type": "object",
      "properties": {
        "header": {
          "$ref": "ResponseHeader"
        },
        "rrsets": {
          "description": "! The resource record set resources.",
          "type": "array",
          "items": {
            "$ref": "ResourceRecordSet"
          }
        },
        "nextPageToken": {
          "description": "! The presence of this field indicates that there exist more results\n! following your last page of results in pagination order. To fetch them,\n! make another list request using this value as your pagination token.\n!\n! In this way you can retrieve the complete contents of even very large\n! collections one page at a time. However, if the contents of the collection\n! change between the first and last paginated list request, the set of all\n! elements returned will be an inconsistent view of the collection. There is\n! no way to retrieve a consistent snapshot of a collection larger than the\n! maximum page size.",
          "type": "string"
        },
        "kind": {
          "default": "dns#resourceRecordSetsListResponse",
          "type": "string"
        }
      }
    },
    "ResponseHeader": {
      "id": "ResponseHeader",
      "description": "! Elements common to every response.",
      "type": "object",
      "properties": {
        "operationId": {
          "description": "! For mutating operation requests that completed successfully.\n! This is the client_operation_id if the client specified it,\n! otherwise it is generated by the server (output only).",
          "type": "string"
        }
      }
    },
    "ResourceRecordSet": {
      "id": "ResourceRecordSet",
      "description": "! A unit of data that will be returned by the DNS servers.",
      "type": "object",
      "properties": {
        "name": {
          "description": "! For example, www.example.com.",
          "type": "string"
        },
        "type": {
          "description": "! The identifier of a supported record type. See the list of\n! <a href=\"\/dns\/docs\/overview#supported_dns_record_types\">Supported\n! DNS record types<\/a>.",
          "type": "string"
        },
        "ttl": {
          "description": "! Number of seconds that this ResourceRecordSet can be cached by resolvers.",
          "type": "integer",
          "format": "int32"
        },
        "rrdatas": {
          "description": "! As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see\n! <a href=\"\/dns\/records\/json-record\">examples<\/a>.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "signatureRrdatas": {
          "description": "! As defined in RFC 4034 (section 3.2).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "default": "dns#resourceRecordSet",
          "type": "string"
        }
      }
    },
    "PeeringZonesListResponse": {
      "id": "PeeringZonesListResponse",
      "type": "object",
      "properties": {
        "header": {
          "$ref": "ResponseHeader"
        },
        "peeringZones": {
          "description": "! The active peering zone resources matching the request.\n! Each ManagedZone has only the id field set.",
          "type": "array",
          "items": {
            "$ref": "ManagedZone"
          }
        },
        "nextPageToken": {
          "description": "! The presence of this field indicates that there exist more results\n! following your last page of results in pagination order. To fetch them,\n! make another list request using this value as your page token.\n!\n! In this way you can retrieve the complete contents of even very large\n! collections one page at a time. However, if the contents of the collection\n! change between the first and last paginated list request, the set of all\n! elements returned will be an inconsistent view of the collection. There is\n! no way to retrieve a consistent snapshot of a collection larger than the\n! maximum page size.",
          "type": "string"
        },
        "kind": {
          "default": "dns#peeringZonesListResponse",
          "type": "string"
        }
      }
    },
    "ManagedZone": {
      "id": "ManagedZone",
      "description": "! A zone is a subtree of the DNS namespace under one administrative\n! responsibility. A ManagedZone is a resource that represents a DNS zone\n! hosted by the Cloud DNS service.",
      "type": "object",
      "properties": {
        "name": {
          "description": "! User assigned name for this resource. Must be unique within the project.\n! The name must be 1-63 characters long, must begin with a letter, end with\n! a letter or digit, and only contain lowercase letters, digits or dashes.",
          "type": "string"
        },
        "dnsName": {
          "description": "! The DNS name of this managed zone, for instance \"example.com.\".",
          "type": "string"
        },
        "description": {
          "description": "! A mutable string of at most 1024 characters associated with this resource\n! for the user's convenience. Has no effect on the managed zone's function.",
          "type": "string"
        },
        "id": {
          "description": "! Unique identifier for the resource; defined by the server (output only)",
          "type": "string",
          "format": "uint64"
        },
        "nameServers": {
          "description": "! Delegate your managed_zone to these virtual name servers; defined by the\n! server (output only)",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creationTime": {
          "description": "! The time that this resource was created on the server. This is in RFC3339\n! text format. Output only.",
          "type": "string"
        },
        "dnssecConfig": {
          "description": "! DNSSEC configuration.",
          "$ref": "ManagedZoneDnsSecConfig"
        },
        "nameServerSet": {
          "description": "INTERNAL ONLY: nameServerSet is non-public functionality that enables\ncustomers to select the DNS name server for their zone e.g.\nns-cloud-a[1-4].googledomains.com vs. ns-cloud-b[1-4].googledomains.com.\nUsage of this feature requires specific whitelisting and is only available\nto customers on a case-by-case basis. Please contact cloud-dns-team@ if you\nthink you need this functionality.\n! Optionally specifies the NameServerSet for this ManagedZone. A\n! NameServerSet is a set of DNS name servers that all host the same\n! ManagedZones. Most users will leave this field unset.",
          "type": "string"
        },
        "visibility": {
          "description": "! The zone's visibility: public zones are exposed to the Internet, while\n! private zones are visible only to Virtual Private Cloud resources.",
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "public",
            "private"
          ]
        },
        "privateVisibilityConfig": {
          "description": "! For privately visible zones, the set of Virtual Private Cloud resources\n! that the zone is visible from.",
          "$ref": "ManagedZonePrivateVisibilityConfig"
        },
        "forwardingConfig": {
          "description": "! The presence for this field indicates that outbound forwarding is enabled\n! for this zone.  The value of this field contains the set of destinations\n! to forward to.",
          "$ref": "ManagedZoneForwardingConfig"
        },
        "labels": {
          "description": "! User labels.\n Refer to go\/unified-cloud-labels-proposal",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "serviceDiscoveryConfig": {
          "description": "! This field links to the associated service registry. This field should\n! not be set for public zones or forwarding zones.",
          "$ref": "ManagedZoneServiceDiscoveryConfig"
        },
        "peeringConfig": {
          "description": "! The presence of this field indicates that DNS Peering is enabled for this\n! zone. The value of this field contains the network to peer with.",
          "$ref": "ManagedZonePeeringConfig"
        },
        "reverseLookupConfig": {
          "description": "! The presence of this field indicates that this is a managed reverse\n! lookup zone and Cloud DNS will resolve reverse lookup queries using\n! automatically configured records for VPC resources. This only applies\n! to networks listed under private_visibility_config.",
          "$ref": "ManagedZoneReverseLookupConfig"
        },
        "kind": {
          "default": "dns#managedZone",
          "type": "string"
        }
      }
    },
    "ManagedZoneDnsSecConfig": {
      "id": "ManagedZoneDnsSecConfig",
      "type": "object",
      "properties": {
        "state": {
          "description": "! Specifies whether DNSSEC is enabled, and what mode it is in.",
          "enumDescriptions": [
            "DNSSEC is disabled; the zone is not signed.",
            "DNSSEC is enabled; the zone is signed and fully managed.",
            "DNSSEC is enabled, but in a \"transfer\" mode."
          ],
          "type": "string",
          "enum": [
            "off",
            "on",
            "transfer"
          ]
        },
        "defaultKeySpecs": {
          "description": "! Specifies parameters for generating initial DnsKeys for this\n! ManagedZone. Can only be changed while the state is OFF.",
          "type": "array",
          "items": {
            "$ref": "DnsKeySpec"
          }
        },
        "nonExistence": {
          "description": "! Specifies the mechanism for authenticated denial-of-existence responses.\n! Can only be changed while the state is OFF.",
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "nsec",
            "nsec3"
          ]
        },
        "kind": {
          "default": "dns#managedZoneDnsSecConfig",
          "type": "string"
        }
      }
    },
    "DnsKeySpec": {
      "id": "DnsKeySpec",
      "description": "! Parameters for DnsKey key generation. Used for generating initial keys\n! for a new ManagedZone and as default when adding a new DnsKey.",
      "type": "object",
      "properties": {
        "keyType": {
          "description": "! Specifies whether this is a key signing key (KSK) or a zone signing key\n! (ZSK). Key signing keys have the Secure Entry Point flag set and, when\n! active, will only be used to sign resource record sets of type DNSKEY.\n! Zone signing keys do not have the Secure Entry Point flag set and will be\n! used to sign all other types of resource record sets.",
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "keySigning",
            "zoneSigning"
          ]
        },
        "algorithm": {
          "description": "! String mnemonic specifying the DNSSEC algorithm of this key.",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "rsasha1",
            "rsasha256",
            "rsasha512",
            "ecdsap256sha256",
            "ecdsap384sha384"
          ]
        },
        "keyLength": {
          "description": "! Length of the keys in bits.",
          "type": "integer",
          "format": "uint32"
        },
        "kind": {
          "default": "dns#dnsKeySpec",
          "type": "string"
        }
      }
    },
    "ManagedZonePrivateVisibilityConfig": {
      "id": "ManagedZonePrivateVisibilityConfig",
      "type": "object",
      "properties": {
        "networks": {
          "description": "! The list of VPC networks that can see this zone.",
          "type": "array",
          "items": {
            "$ref": "ManagedZonePrivateVisibilityConfigNetwork"
          }
        },
        "kind": {
          "default": "dns#managedZonePrivateVisibilityConfig",
          "type": "string"
        }
      }
    },
    "ManagedZonePrivateVisibilityConfigNetwork": {
      "id": "ManagedZonePrivateVisibilityConfigNetwork",
      "type": "object",
      "properties": {
        "networkUrl": {
          "description": "! The fully qualified URL of the VPC network to bind to.\n! This should be formatted like\n! https:\/\/www.googleapis.com\/compute\/v1\/projects\/{project}\/global\/networks\/{network}",
          "type": "string"
        },
        "kind": {
          "default": "dns#managedZonePrivateVisibilityConfigNetwork",
          "type": "string"
        }
      }
    },
    "ManagedZoneForwardingConfig": {
      "id": "ManagedZoneForwardingConfig",
      "type": "object",
      "properties": {
        "targetNameServers": {
          "description": "! List of target name servers to forward to.\n! Cloud DNS will select the best available name server if more than one\n! target is given.",
          "type": "array",
          "items": {
            "$ref": "ManagedZoneForwardingConfigNameServerTarget"
          }
        },
        "kind": {
          "default": "dns#managedZoneForwardingConfig",
          "type": "string"
        }
      }
    },
    "ManagedZoneForwardingConfigNameServerTarget": {
      "id": "ManagedZoneForwardingConfigNameServerTarget",
      "type": "object",
      "properties": {
        "ipv4Address": {
          "description": "! IPv4 address of a target name server.",
          "type": "string"
        },
        "forwardingPath": {
          "description": "! Forwarding path for this NameServerTarget, if unset or set to DEFAULT,\n! Cloud DNS will make forwarding decision based on address ranges,\n! i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go to the\n! Internet. When set to PRIVATE, Cloud DNS will always send queries\n! through VPC for this target",
          "enumDescriptions": [
            "! Cloud DNS will make forwarding decision based on address ranges,\n! i.e. RFC1918 addresses forward to the target through the VPC and\n! Non-RFC1918 addresses will forward to the target through the\n! Internet",
            "Cloud DNS will always forward to this target through the VPC."
          ],
          "type": "string",
          "enum": [
            "default",
            "private"
          ]
        },
        "kind": {
          "default": "dns#managedZoneForwardingConfigNameServerTarget",
          "type": "string"
        }
      }
    },
    "ManagedZoneServiceDiscoveryConfig": {
      "id": "ManagedZoneServiceDiscoveryConfig",
      "description": "! Contains information about Service Discovery-backed zones.",
      "type": "object",
      "properties": {
        "serviceRegistry": {
          "description": "! Contains information about the registry associated with the zone.",
          "$ref": "ManagedZoneServiceDiscoveryConfigServiceRegistry"
        },
        "kind": {
          "default": "dns#managedZoneServiceDiscoveryConfig",
          "type": "string"
        }
      }
    },
    "ManagedZoneServiceDiscoveryConfigServiceRegistry": {
      "id": "ManagedZoneServiceDiscoveryConfigServiceRegistry",
      "type": "object",
      "properties": {
        "registryUrl": {
          "description": "! The fully qualified URL of the registry associated with the zone. This\n! should be formatted like\n! https:\/\/www.servicediscovery.googleapis.com\/v1\/projects\/{project}\/locations\/{location}\/registries\/{registry}",
          "type": "string"
        },
        "deletionTime": {
          "description": "! The time that the registry backing this zone was deleted, empty string\n! if it still exists. This is in RFC3339 text format. Output only.",
          "type": "string"
        },
        "kind": {
          "default": "dns#managedZoneServiceDiscoveryConfigServiceRegistry",
          "type": "string"
        }
      }
    },
    "ManagedZonePeeringConfig": {
      "id": "ManagedZonePeeringConfig",
      "type": "object",
      "properties": {
        "targetNetwork": {
          "description": "! The network with which to peer.",
          "$ref": "ManagedZonePeeringConfigTargetNetwork"
        },
        "kind": {
          "default": "dns#managedZonePeeringConfig",
          "type": "string"
        }
      }
    },
    "ManagedZonePeeringConfigTargetNetwork": {
      "id": "ManagedZonePeeringConfigTargetNetwork",
      "type": "object",
      "properties": {
        "networkUrl": {
          "description": "! The fully qualified URL of the VPC network to forward queries to.\n! This should be formatted like\n! https:\/\/www.googleapis.com\/compute\/v1\/projects\/{project}\/global\/networks\/{network}",
          "type": "string"
        },
        "deactivateTime": {
          "description": "! The time at which the zone was deactivated, in RFC 3339 date-time\n! format. An empty string indicates that the peering connection is\n! active. The producer network can deactivate a zone. The zone is\n! automatically deactivated if the producer network that the zone\n! targeted is deleted. Output only.",
          "type": "string"
        },
        "kind": {
          "default": "dns#managedZonePeeringConfigTargetNetwork",
          "type": "string"
        }
      }
    },
    "ManagedZoneReverseLookupConfig": {
      "id": "ManagedZoneReverseLookupConfig",
      "type": "object",
      "properties": {
        "kind": {
          "default": "dns#managedZoneReverseLookupConfig",
          "type": "string"
        }
      }
    },
    "PeeringZoneDeactivateResponse": {
      "id": "PeeringZoneDeactivateResponse",
      "type": "object",
      "properties": {
        "header": {
          "$ref": "ResponseHeader"
        },
        "deactivateSucceeded": {
          "description": "True if the zone is deactivated by this request, false if the zone exists\nand is of type peering zone but was already deactivated.",
          "type": "boolean"
        }
      }
    },
    "Change": {
      "id": "Change",
      "description": "! A Change represents a set of ResourceRecordSet additions and deletions\n! applied atomically to a ManagedZone. ResourceRecordSets within a\n! ManagedZone are modified by creating a new Change element in the Changes\n! collection. In turn the Changes collection also records the past\n! modifications to the ResourceRecordSets in a ManagedZone. The current\n! state of the ManagedZone is the sum effect of applying all Change\n! elements in the Changes collection in sequence.",
      "type": "object",
      "properties": {
        "additions": {
          "description": "! Which ResourceRecordSets to add?",
          "type": "array",
          "items": {
            "$ref": "ResourceRecordSet"
          }
        },
        "deletions": {
          "description": "! Which ResourceRecordSets to remove? Must match existing data exactly.",
          "type": "array",
          "items": {
            "$ref": "ResourceRecordSet"
          }
        },
        "startTime": {
          "description": "! The time that this operation was started by the server (output only). This\n! is in RFC3339 text format.",
          "type": "string"
        },
        "id": {
          "description": "! Unique identifier for the resource; defined by the server (output only).",
          "type": "string"
        },
        "status": {
          "description": "! Status of the operation (output only). A status of \"done\" means that the\n! request to update the authoritative servers has been sent, but the\n! servers might not be updated yet.",
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "pending",
            "done"
          ]
        },
        "isServing": {
          "description": "! If the DNS queries for the zone will be served.",
          "type": "boolean"
        },
        "kind": {
          "default": "dns#change",
          "type": "string"
        }
      }
    },
    "ChangesListResponse": {
      "id": "ChangesListResponse",
      "description": "! The response to a request to enumerate Changes to a ResourceRecordSets\n! collection.",
      "type": "object",
      "properties": {
        "header": {
          "$ref": "ResponseHeader"
        },
        "changes": {
          "description": "! The requested changes.",
          "type": "array",
          "items": {
            "$ref": "Change"
          }
        },
        "nextPageToken": {
          "description": "! The presence of this field indicates that there exist more results\n! following your last page of results in pagination order. To fetch them,\n! make another list request using this value as your pagination token.\n!\n! In this way you can retrieve the complete contents of even very large\n! collections one page at a time. However, if the contents of the collection\n! change between the first and last paginated list request, the set of all\n! elements returned will be an inconsistent view of the collection. There is\n! no way to retrieve a \"snapshot\" of collections larger than the maximum\n! page size.",
          "type": "string"
        },
        "kind": {
          "description": "Type of resource.",
          "default": "dns#changesListResponse",
          "type": "string"
        }
      }
    },
    "DnsKey": {
      "id": "DnsKey",
      "description": "! A DNSSEC key pair.",
      "type": "object",
      "properties": {
        "id": {
          "description": "! Unique identifier for the resource; defined by the server (output only).",
          "type": "string"
        },
        "algorithm": {
          "description": "! String mnemonic specifying the DNSSEC algorithm of this key. Immutable\n! after creation time.",
          "enumDescriptions": [
            "",
            "",
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "rsasha1",
            "rsasha256",
            "rsasha512",
            "ecdsap256sha256",
            "ecdsap384sha384"
          ]
        },
        "keyLength": {
          "description": "! Length of the key in bits. Specified at creation time then immutable.",
          "type": "integer",
          "format": "uint32"
        },
        "publicKey": {
          "description": "! Base64 encoded public half of this key. Output only.",
          "type": "string"
        },
        "creationTime": {
          "description": "! The time that this resource was created in the control plane. This is in\n! RFC3339 text format. Output only.",
          "type": "string"
        },
        "isActive": {
          "description": "! Active keys will be used to sign subsequent changes to the ManagedZone.\n! Inactive keys will still be present as DNSKEY Resource Records for the use\n! of resolvers validating existing signatures.",
          "type": "boolean"
        },
        "type": {
          "description": "! One of \"KEY_SIGNING\" or \"ZONE_SIGNING\". Keys of type KEY_SIGNING have the\n! Secure Entry Point flag set and, when active, will be used to sign only\n! resource record sets of type DNSKEY. Otherwise, the Secure Entry Point\n! flag will be cleared and this key will be used to sign only resource\n! record sets of other types. Immutable after creation time.",
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "keySigning",
            "zoneSigning"
          ]
        },
        "keyTag": {
          "description": "! The key tag is a non-cryptographic hash of the a DNSKEY resource record\n! associated with this DnsKey. The key tag can be used to identify a DNSKEY\n! more quickly (but it is not a unique identifier). In particular, the key\n! tag is used in a parent zone's DS record to point at the DNSKEY in this\n! child ManagedZone. The key tag is a number in the range [0, 65535] and the\n! algorithm to calculate it is specified in RFC4034 Appendix B. Output only.",
          "type": "integer",
          "format": "int32"
        },
        "digests": {
          "description": "! Cryptographic hashes of the DNSKEY resource record associated with this\n! DnsKey. These digests are needed to construct a DS record that points at\n! this DNS key. Output only.",
          "type": "array",
          "items": {
            "$ref": "DnsKeyDigest"
          }
        },
        "description": {
          "description": "! A mutable string of at most 1024 characters associated with this resource\n! for the user's convenience. Has no effect on the resource's function.",
          "type": "string"
        },
        "kind": {
          "default": "dns#dnsKey",
          "type": "string"
        }
      }
    },
    "DnsKeyDigest": {
      "id": "DnsKeyDigest",
      "type": "object",
      "properties": {
        "type": {
          "description": "! Specifies the algorithm used to calculate this digest.",
          "enumDescriptions": [
            "",
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "sha1",
            "sha256",
            "sha384"
          ]
        },
        "digest": {
          "description": "! The base-16 encoded bytes of this digest. Suitable for use in a DS\n! resource record.",
          "type": "string"
        }
      }
    },
    "DnsKeysListResponse": {
      "id": "DnsKeysListResponse",
      "description": "! The response to a request to enumerate DnsKeys in a ManagedZone.",
      "type": "object",
      "properties": {
        "header": {
          "$ref": "ResponseHeader"
        },
        "dnsKeys": {
          "description": "! The requested resources.",
          "type": "array",
          "items": {
            "$ref": "DnsKey"
          }
        },
        "nextPageToken": {
          "description": "! The presence of this field indicates that there exist more results\n! following your last page of results in pagination order. To fetch them,\n! make another list request using this value as your pagination token.\n!\n! In this way you can retrieve the complete contents of even very large\n! collections one page at a time. However, if the contents of the collection\n! change between the first and last paginated list request, the set of all\n! elements returned will be an inconsistent view of the collection. There is\n! no way to retrieve a \"snapshot\" of collections larger than the maximum\n! page size.",
          "type": "string"
        },
        "kind": {
          "description": "Type of resource.",
          "default": "dns#dnsKeysListResponse",
          "type": "string"
        }
      }
    },
    "Project": {
      "id": "Project",
      "description": "! A project resource. The project is a top level container for resources\n! including Cloud DNS ManagedZones. Projects can be created only in the APIs\n! console.",
      "type": "object",
      "properties": {
        "number": {
          "description": "! Unique numeric identifier for the resource; defined by the server (output\n! only).",
          "type": "string",
          "format": "uint64"
        },
        "id": {
          "description": "! User assigned unique identifier for the resource (output only).",
          "type": "string"
        },
        "quota": {
          "description": "! Quotas assigned to this project (output only).",
          "$ref": "Quota"
        },
        "whitelistedFeatures": {
          "description": "! A list of alpha\/temporary\/experimental features enabled for this project\n! (output only).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "kind": {
          "default": "dns#project",
          "type": "string"
        }
      }
    },
    "Quota": {
      "id": "Quota",
      "description": "! Limits associated with a Project.",
      "type": "object",
      "properties": {
        "managedZones": {
          "description": "! Maximum allowed number of managed zones in the project.",
          "type": "integer",
          "format": "int32"
        },
        "rrsetsPerManagedZone": {
          "description": "! Maximum allowed number of ResourceRecordSets per zone in the project.",
          "type": "integer",
          "format": "int32"
        },
        "rrsetAdditionsPerChange": {
          "description": "! Maximum allowed number of ResourceRecordSets to add per\n! ChangesCreateRequest.",
          "type": "integer",
          "format": "int32"
        },
        "rrsetDeletionsPerChange": {
          "description": "! Maximum allowed number of ResourceRecordSets to delete per\n! ChangesCreateRequest.",
          "type": "integer",
          "format": "int32"
        },
        "totalRrdataSizePerChange": {
          "description": "! Maximum allowed size for total rrdata in one ChangesCreateRequest in\n! bytes.",
          "type": "integer",
          "format": "int32"
        },
        "resourceRecordsPerRrset": {
          "description": "! Maximum allowed number of ResourceRecords per ResourceRecordSet.",
          "type": "integer",
          "format": "int32"
        },
        "dnsKeysPerManagedZone": {
          "description": "! Maximum allowed number of DnsKeys per ManagedZone.",
          "type": "integer",
          "format": "int32"
        },
        "whitelistedKeySpecs": {
          "description": "! DNSSEC algorithm and key length types that can be used for DnsKeys.",
          "type": "array",
          "items": {
            "$ref": "DnsKeySpec"
          }
        },
        "networksPerManagedZone": {
          "description": "! Maximum allowed number of networks to which a privately scoped zone can be\n! attached.",
          "type": "integer",
          "format": "int32"
        },
        "managedZonesPerNetwork": {
          "description": "! Maximum allowed number of managed zones which can be attached to a\n! network.",
          "type": "integer",
          "format": "int32"
        },
        "policies": {
          "description": "! Maximum allowed number of policies per project.",
          "type": "integer",
          "format": "int32"
        },
        "networksPerPolicy": {
          "description": "! Maximum allowed number of networks per policy.",
          "type": "integer",
          "format": "int32"
        },
        "targetNameServersPerPolicy": {
          "description": "! Maximum allowed number of alternative target name servers per policy.",
          "type": "integer",
          "format": "int32"
        },
        "targetNameServersPerManagedZone": {
          "description": "! Maximum allowed number of target name servers per managed forwarding zone.",
          "type": "integer",
          "format": "int32"
        },
        "kind": {
          "default": "dns#quota",
          "type": "string"
        }
      }
    },
    "Operation": {
      "id": "Operation",
      "description": "! An operation represents a successful mutation performed on a Cloud DNS\n! resource.\n! Operations provide:\n! - An audit log of server resource mutations.\n! - A way to recover\/retry API calls in the case where the response is never\n!   received by the caller. Use the caller specified client_operation_id.",
      "type": "object",
      "properties": {
        "id": {
          "description": "! Unique identifier for the resource. This is the client_operation_id if\n! the client specified it when the mutation was initiated, otherwise,\n! it is generated by the server. The name must be 1-63 characters long\n! and match the regular expression [-a-z0-9]? (output only)",
          "type": "string"
        },
        "startTime": {
          "description": "! The time that this operation was started by the server. This is in RFC3339\n! text format (output only).",
          "type": "string"
        },
        "status": {
          "description": "! Status of the operation. Can be one of the following: \"PENDING\" or \"DONE\"\n! (output only). A status of \"DONE\" means that the\n! request to update the authoritative servers has been sent, but the\n! servers might not be updated yet.",
          "enumDescriptions": [
            "",
            ""
          ],
          "type": "string",
          "enum": [
            "pending",
            "done"
          ]
        },
        "user": {
          "description": "! User who requested the operation, for example: user@example.com.\n! cloud-dns-system for operations automatically done by the system.\n! (output only)",
          "type": "string"
        },
        "type": {
          "description": "! Type of the operation. Operations include insert, update, and delete\n! (output only).",
          "type": "string"
        },
        "zoneContext": {
          "description": "! Only populated if the operation targeted a ManagedZone (output only).",
          "$ref": "OperationManagedZoneContext"
        },
        "dnsKeyContext": {
          "description": "! Only populated if the operation targeted a DnsKey (output only).",
          "$ref": "OperationDnsKeyContext"
        },
        "kind": {
          "default": "dns#operation",
          "type": "string"
        }
      }
    },
    "OperationManagedZoneContext": {
      "id": "OperationManagedZoneContext",
      "type": "object",
      "properties": {
        "oldValue": {
          "description": "! The pre-operation ManagedZone resource.",
          "$ref": "ManagedZone"
        },
        "newValue": {
          "description": "! The post-operation ManagedZone resource.",
          "$ref": "ManagedZone"
        }
      }
    },
    "OperationDnsKeyContext": {
      "id": "OperationDnsKeyContext",
      "type": "object",
      "properties": {
        "oldValue": {
          "description": "! The pre-operation DnsKey resource.",
          "$ref": "DnsKey"
        },
        "newValue": {
          "description": "! The post-operation DnsKey resource.",
          "$ref": "DnsKey"
        }
      }
    },
    "ManagedZoneOperationsListResponse": {
      "id": "ManagedZoneOperationsListResponse",
      "type": "object",
      "properties": {
        "header": {
          "$ref": "ResponseHeader"
        },
        "operations": {
          "description": "! The operation resources.",
          "type": "array",
          "items": {
            "$ref": "Operation"
          }
        },
        "nextPageToken": {
          "description": "! The presence of this field indicates that there exist more results\n! following your last page of results in pagination order. To fetch them,\n! make another list request using this value as your page token.\n!\n! In this way you can retrieve the complete contents of even very large\n! collections one page at a time. However, if the contents of the collection\n! change between the first and last paginated list request, the set of all\n! elements returned will be an inconsistent view of the collection. There is\n! no way to retrieve a consistent snapshot of a collection larger than the\n! maximum page size.",
          "type": "string"
        },
        "kind": {
          "default": "dns#managedZoneOperationsListResponse",
          "type": "string"
        }
      }
    },
    "ManagedZonesListResponse": {
      "id": "ManagedZonesListResponse",
      "type": "object",
      "properties": {
        "header": {
          "$ref": "ResponseHeader"
        },
        "managedZones": {
          "description": "! The managed zone resources.",
          "type": "array",
          "items": {
            "$ref": "ManagedZone"
          }
        },
        "nextPageToken": {
          "description": "! The presence of this field indicates that there exist more results\n! following your last page of results in pagination order. To fetch them,\n! make another list request using this value as your page token.\n!\n! In this way you can retrieve the complete contents of even very large\n! collections one page at a time. However, if the contents of the collection\n! change between the first and last paginated list request, the set of all\n! elements returned will be an inconsistent view of the collection. There is\n! no way to retrieve a consistent snapshot of a collection larger than the\n! maximum page size.",
          "type": "string"
        },
        "kind": {
          "description": "Type of resource.",
          "default": "dns#managedZonesListResponse",
          "type": "string"
        }
      }
    },
    "Policy": {
      "id": "Policy",
      "description": "! A policy is a collection of DNS rules applied to one or more Virtual Private\n! Cloud resources.",
      "type": "object",
      "properties": {
        "id": {
          "description": "! Unique identifier for the resource; defined by the server (output only).",
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "description": "! User assigned name for this policy.",
          "type": "string"
        },
        "enableInboundForwarding": {
          "description": "! Allows networks bound to this policy to receive DNS queries sent by VMs or\n! applications over VPN connections. When enabled, a virtual IP address will\n! be allocated from each of the sub-networks that are bound to this policy.",
          "type": "boolean"
        },
        "description": {
          "description": "! A mutable string of at most 1024 characters associated with this resource\n! for the user's convenience. Has no effect on the policy's function.",
          "type": "string"
        },
        "networks": {
          "description": "! List of network names specifying networks to which this policy is applied.",
          "type": "array",
          "items": {
            "$ref": "PolicyNetwork"
          }
        },
        "alternativeNameServerConfig": {
          "description": "! Sets an alternative name server for the associated networks. When\n! specified, all DNS queries are forwarded to a name server that you\n! choose. Names such as .internal are not available when an alternative\n! name server is specified.",
          "$ref": "PolicyAlternativeNameServerConfig"
        },
        "enableLogging": {
          "description": "! Controls whether logging is enabled for the networks bound to this policy.\n! Defaults to no logging if not set.",
          "type": "boolean"
        },
        "kind": {
          "default": "dns#policy",
          "type": "string"
        }
      }
    },
    "PolicyNetwork": {
      "id": "PolicyNetwork",
      "type": "object",
      "properties": {
        "networkUrl": {
          "description": "! The fully qualified URL of the VPC network to bind to.\n! This should be formatted like\n! https:\/\/www.googleapis.com\/compute\/v1\/projects\/{project}\/global\/networks\/{network}",
          "type": "string"
        },
        "kind": {
          "default": "dns#policyNetwork",
          "type": "string"
        }
      }
    },
    "PolicyAlternativeNameServerConfig": {
      "id": "PolicyAlternativeNameServerConfig",
      "description": "LINT.IfChange",
      "type": "object",
      "properties": {
        "targetNameServers": {
          "description": "! Sets an alternative name server for the associated networks. When\n! specified, all DNS queries are forwarded to a name server that you\n! choose. Names such as .internal are not available when an alternative\n! name server is specified.",
          "type": "array",
          "items": {
            "$ref": "PolicyAlternativeNameServerConfigTargetNameServer"
          }
        },
        "kind": {
          "default": "dns#policyAlternativeNameServerConfig",
          "type": "string"
        }
      }
    },
    "PolicyAlternativeNameServerConfigTargetNameServer": {
      "id": "PolicyAlternativeNameServerConfigTargetNameServer",
      "type": "object",
      "properties": {
        "ipv4Address": {
          "description": "! IPv4 address to forward to.",
          "type": "string"
        },
        "forwardingPath": {
          "description": "! Forwarding path for this TargetNameServer, if unset or set to DEFAULT,\n! Cloud DNS will make forwarding decision based on address ranges,\n! i.e. RFC1918 addresses go to the VPC, Non-RFC1918 addresses go to the\n! Internet. When set to PRIVATE, Cloud DNS will always send queries\n! through VPC for this target",
          "enumDescriptions": [
            "! Cloud DNS will make forwarding decision based on address ranges,\n! i.e. RFC1918 addresses forward to the target through the VPC and\n! Non-RFC1918 addresses will forward to the target through the\n! Internet",
            "Cloud DNS will always forward to this target through the VPC."
          ],
          "type": "string",
          "enum": [
            "default",
            "private"
          ]
        },
        "kind": {
          "default": "dns#policyAlternativeNameServerConfigTargetNameServer",
          "type": "string"
        }
      }
    },
    "PoliciesListResponse": {
      "id": "PoliciesListResponse",
      "type": "object",
      "properties": {
        "header": {
          "$ref": "ResponseHeader"
        },
        "policies": {
          "description": "! The policy resources.",
          "type": "array",
          "items": {
            "$ref": "Policy"
          }
        },
        "nextPageToken": {
          "description": "! The presence of this field indicates that there exist more results\n! following your last page of results in pagination order. To fetch them,\n! make another list request using this value as your page token.\n!\n! In this way you can retrieve the complete contents of even very large\n! collections one page at a time. However, if the contents of the collection\n! change between the first and last paginated list request, the set of all\n! elements returned will be an inconsistent view of the collection. There is\n! no way to retrieve a consistent snapshot of a collection larger than the\n! maximum page size.",
          "type": "string"
        },
        "kind": {
          "description": "Type of resource.",
          "default": "dns#policiesListResponse",
          "type": "string"
        }
      }
    },
    "PoliciesDeleteResponse": {
      "id": "PoliciesDeleteResponse",
      "type": "object",
      "properties": {
      }
    },
    "PoliciesPatchResponse": {
      "id": "PoliciesPatchResponse",
      "type": "object",
      "properties": {
        "header": {
          "$ref": "ResponseHeader"
        },
        "policy": {
          "$ref": "Policy"
        }
      }
    },
    "PoliciesUpdateResponse": {
      "id": "PoliciesUpdateResponse",
      "type": "object",
      "properties": {
        "header": {
          "$ref": "ResponseHeader"
        },
        "policy": {
          "$ref": "Policy"
        }
      }
    }
  },
  "resources": {
    "resourceRecordSets": {
      "methods": {
        "list": {
          "id": "dns.resourceRecordSets.list",
          "path": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/rrsets",
          "flatPath": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/rrsets",
          "httpMethod": "GET",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "managedZone": {
              "description": "! Identifies the managed zone addressed by this request. Can be the managed\n! zone name or id.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "description": "! Optional. Maximum number of results to be returned. If unspecified, the\n! server will decide how many results to return.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "! Optional. A tag returned by a previous list request that was truncated.\n! Use this parameter to continue a previous list request.",
              "location": "query",
              "type": "string"
            },
            "name": {
              "description": "! Restricts the list to return only records with this fully qualified domain\n! name.",
              "location": "query",
              "type": "string"
            },
            "type": {
              "description": "! Restricts the list to return only records of this type. If present, the\n! \"name\" parameter must also be present.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "managedZone"
          ],
          "response": {
            "$ref": "ResourceRecordSetsListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/ndev.clouddns.readonly",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Enumerate ResourceRecordSets that have been created but not yet deleted."
        }
      }
    },
    "activePeeringZones": {
      "methods": {
        "list": {
          "id": "dns.activePeeringZones.list",
          "path": "dns/v1alpha2/projects/{project}/activePeeringZones/{targetNetwork}",
          "flatPath": "dns/v1alpha2/projects/{project}/activePeeringZones/{targetNetwork}",
          "httpMethod": "GET",
          "parameters": {
            "project": {
              "description": "! Identifies the producer project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "targetNetwork": {
              "description": "! Identifies the target network addressed by this request by network name.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "description": "! Optional. Maximum number of results to be returned. If unspecified, the\n! server will decide how many results to return.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "! Optional. A tag returned by a previous list request that was truncated.\n! Use this parameter to continue a previous list request.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "targetNetwork"
          ],
          "response": {
            "$ref": "PeeringZonesListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/ndev.clouddns.readonly",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Enumerate PeeringZones that target a given network via dns peering."
        },
        "getPeeringZoneInfo": {
          "id": "dns.activePeeringZones.getPeeringZoneInfo",
          "path": "dns/v1alpha2/activePeeringZones/{peeringZoneId}",
          "flatPath": "dns/v1alpha2/activePeeringZones/{peeringZoneId}",
          "httpMethod": "GET",
          "parameters": {
            "peeringZoneId": {
              "description": "! ManagedZoneId addressed by this request",
              "location": "path",
              "required": true,
              "type": "string",
              "format": "int64"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            },
            "project": {
              "description": "! Identifies the producer project targeted by the peering zone in this\n! request.",
              "location": "query",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "peeringZoneId",
            "project"
          ],
          "response": {
            "$ref": "ManagedZone"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/ndev.clouddns.readonly",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Fetch the representation of an existing PeeringZone."
        },
        "deactivate": {
          "id": "dns.activePeeringZones.deactivate",
          "path": "dns/v1alpha2/projects/{project}/activePeeringZones/{peeringZoneId}",
          "flatPath": "dns/v1alpha2/projects/{project}/activePeeringZones/{peeringZoneId}",
          "httpMethod": "DELETE",
          "parameters": {
            "project": {
              "description": "! The project ID for the producer project targeted by the consumer\n! peering zone to be deactivated.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "peeringZoneId": {
              "description": "! The unique peering zone id of the consumer peering zone to be deactivated.",
              "location": "path",
              "required": true,
              "type": "string",
              "format": "int64"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "peeringZoneId"
          ],
          "response": {
            "$ref": "PeeringZoneDeactivateResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Deactivate a Peering Zone if it's not already deactivated. Returns an\n! error if the managed zone cannot be found, is not a peering zone. If the\n! zone is already deactivated, returns false for deactivate_succeeded field."
        }
      }
    },
    "changes": {
      "methods": {
        "create": {
          "id": "dns.changes.create",
          "path": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/changes",
          "flatPath": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/changes",
          "httpMethod": "POST",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "managedZone": {
              "description": "! Identifies the managed zone addressed by this request. Can be the managed\n! zone name or id.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "managedZone"
          ],
          "request": {
            "$ref": "Change"
          },
          "response": {
            "$ref": "Change"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Atomically update the ResourceRecordSet collection."
        },
        "get": {
          "id": "dns.changes.get",
          "path": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/changes/{changeId}",
          "flatPath": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/changes/{changeId}",
          "httpMethod": "GET",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "managedZone": {
              "description": "! Identifies the managed zone addressed by this request. Can be the managed\n! zone name or id.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "changeId": {
              "description": "! The identifier of the requested change, from a previous\n! ResourceRecordSetsChangeResponse.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "managedZone",
            "changeId"
          ],
          "response": {
            "$ref": "Change"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/ndev.clouddns.readonly",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Fetch the representation of an existing Change."
        },
        "list": {
          "id": "dns.changes.list",
          "path": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/changes",
          "flatPath": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/changes",
          "httpMethod": "GET",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "managedZone": {
              "description": "! Identifies the managed zone addressed by this request. Can be the managed\n! zone name or id.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "description": "! Optional. Maximum number of results to be returned. If unspecified, the\n! server will decide how many results to return.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "! Optional. A tag returned by a previous list request that was truncated.\n! Use this parameter to continue a previous list request.",
              "location": "query",
              "type": "string"
            },
            "sortBy": {
              "description": "! Sorting criterion. The only supported value is change sequence.",
              "default": "changeSequence",
              "location": "query",
              "type": "string",
              "enum": [
                "changeSequence"
              ]
            },
            "sortOrder": {
              "description": "! Sorting order direction: 'ascending' or 'descending'.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "managedZone"
          ],
          "response": {
            "$ref": "ChangesListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/ndev.clouddns.readonly",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Enumerate Changes to a ResourceRecordSet collection."
        }
      }
    },
    "dnsKeys": {
      "methods": {
        "get": {
          "id": "dns.dnsKeys.get",
          "path": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}",
          "flatPath": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}",
          "httpMethod": "GET",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "managedZone": {
              "description": "! Identifies the managed zone addressed by this request. Can be the managed\n! zone name or id.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "dnsKeyId": {
              "description": "! The identifier of the requested DnsKey.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            },
            "digestType": {
              "description": "! An optional comma-separated list of digest types to compute and display\n! for key signing keys. If omitted, the recommended digest type will be\n! computed and displayed.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "managedZone",
            "dnsKeyId"
          ],
          "response": {
            "$ref": "DnsKey"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/ndev.clouddns.readonly",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Fetch the representation of an existing DnsKey."
        },
        "list": {
          "id": "dns.dnsKeys.list",
          "path": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/dnsKeys",
          "flatPath": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/dnsKeys",
          "httpMethod": "GET",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "managedZone": {
              "description": "! Identifies the managed zone addressed by this request. Can be the managed\n! zone name or id.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "description": "! Optional. Maximum number of results to be returned. If unspecified, the\n! server will decide how many results to return.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "! Optional. A tag returned by a previous list request that was truncated.\n! Use this parameter to continue a previous list request.",
              "location": "query",
              "type": "string"
            },
            "digestType": {
              "description": "! An optional comma-separated list of digest types to compute and display\n! for key signing keys. If omitted, the recommended digest type will be\n! computed and displayed.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "managedZone"
          ],
          "response": {
            "$ref": "DnsKeysListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/ndev.clouddns.readonly",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Enumerate DnsKeys to a ResourceRecordSet collection."
        }
      }
    },
    "projects": {
      "methods": {
        "get": {
          "id": "dns.projects.get",
          "path": "dns/v1alpha2/projects/{project}",
          "flatPath": "dns/v1alpha2/projects/{project}",
          "httpMethod": "GET",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project"
          ],
          "response": {
            "$ref": "Project"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/ndev.clouddns.readonly",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Fetch the representation of an existing Project."
        }
      }
    },
    "managedZoneOperations": {
      "methods": {
        "get": {
          "id": "dns.managedZoneOperations.get",
          "path": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/operations/{operation}",
          "flatPath": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/operations/{operation}",
          "httpMethod": "GET",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "managedZone": {
              "description": "! Identifies the managed zone addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "operation": {
              "description": "! Identifies the operation addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "managedZone",
            "operation"
          ],
          "response": {
            "$ref": "Operation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/ndev.clouddns.readonly",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Fetch the representation of an existing Operation."
        },
        "list": {
          "id": "dns.managedZoneOperations.list",
          "path": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/operations",
          "flatPath": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}/operations",
          "httpMethod": "GET",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "managedZone": {
              "description": "! Identifies the managed zone addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "description": "! Optional. Maximum number of results to be returned. If unspecified, the\n! server will decide how many results to return.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "! Optional. A tag returned by a previous list request that was truncated.\n! Use this parameter to continue a previous list request.",
              "location": "query",
              "type": "string"
            },
            "sortBy": {
              "description": "! Sorting criterion. The only supported values are START_TIME and ID.",
              "default": "startTime",
              "location": "query",
              "type": "string",
              "enum": [
                "startTime",
                "id"
              ]
            }
          },
          "parameterOrder": [
            "project",
            "managedZone"
          ],
          "response": {
            "$ref": "ManagedZoneOperationsListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/ndev.clouddns.readonly",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Enumerate Operations for the given ManagedZone."
        }
      }
    },
    "managedZones": {
      "methods": {
        "create": {
          "id": "dns.managedZones.create",
          "path": "dns/v1alpha2/projects/{project}/managedZones",
          "flatPath": "dns/v1alpha2/projects/{project}/managedZones",
          "httpMethod": "POST",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project"
          ],
          "request": {
            "$ref": "ManagedZone"
          },
          "response": {
            "$ref": "ManagedZone"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Create a new ManagedZone."
        },
        "get": {
          "id": "dns.managedZones.get",
          "path": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}",
          "flatPath": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}",
          "httpMethod": "GET",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "managedZone": {
              "description": "! Identifies the managed zone addressed by this request. Can be the managed\n! zone name or id.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "managedZone"
          ],
          "response": {
            "$ref": "ManagedZone"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/ndev.clouddns.readonly",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Fetch the representation of an existing ManagedZone."
        },
        "list": {
          "id": "dns.managedZones.list",
          "path": "dns/v1alpha2/projects/{project}/managedZones",
          "flatPath": "dns/v1alpha2/projects/{project}/managedZones",
          "httpMethod": "GET",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "description": "! Optional. Maximum number of results to be returned. If unspecified, the\n! server will decide how many results to return.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "! Optional. A tag returned by a previous list request that was truncated.\n! Use this parameter to continue a previous list request.",
              "location": "query",
              "type": "string"
            },
            "dnsName": {
              "description": "! Restricts the list to return only zones with this domain name.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project"
          ],
          "response": {
            "$ref": "ManagedZonesListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/ndev.clouddns.readonly",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Enumerate ManagedZones that have been created but not yet deleted."
        },
        "delete": {
          "id": "dns.managedZones.delete",
          "path": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}",
          "flatPath": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}",
          "httpMethod": "DELETE",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "managedZone": {
              "description": "! Identifies the managed zone addressed by this request. Can be the managed\n! zone name or id.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "managedZone"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Delete a previously created ManagedZone."
        },
        "patch": {
          "id": "dns.managedZones.patch",
          "path": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}",
          "flatPath": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}",
          "httpMethod": "PATCH",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "managedZone": {
              "description": "! Identifies the managed zone addressed by this request. Can be the managed\n! zone name or id.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "managedZone"
          ],
          "request": {
            "$ref": "ManagedZone"
          },
          "response": {
            "$ref": "Operation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Apply a partial update to an existing ManagedZone."
        },
        "update": {
          "id": "dns.managedZones.update",
          "path": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}",
          "flatPath": "dns/v1alpha2/projects/{project}/managedZones/{managedZone}",
          "httpMethod": "PUT",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "managedZone": {
              "description": "! Identifies the managed zone addressed by this request. Can be the managed\n! zone name or id.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "managedZone"
          ],
          "request": {
            "$ref": "ManagedZone"
          },
          "response": {
            "$ref": "Operation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Update an existing ManagedZone."
        }
      }
    },
    "policies": {
      "methods": {
        "create": {
          "id": "dns.policies.create",
          "path": "dns/v1alpha2/projects/{project}/policies",
          "flatPath": "dns/v1alpha2/projects/{project}/policies",
          "httpMethod": "POST",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project"
          ],
          "request": {
            "$ref": "Policy"
          },
          "response": {
            "$ref": "Policy"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Create a new Policy"
        },
        "get": {
          "id": "dns.policies.get",
          "path": "dns/v1alpha2/projects/{project}/policies/{policy}",
          "flatPath": "dns/v1alpha2/projects/{project}/policies/{policy}",
          "httpMethod": "GET",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "policy": {
              "description": "! User given friendly name of the policy addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "policy"
          ],
          "response": {
            "$ref": "Policy"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/ndev.clouddns.readonly",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Fetch the representation of an existing Policy."
        },
        "list": {
          "id": "dns.policies.list",
          "path": "dns/v1alpha2/projects/{project}/policies",
          "flatPath": "dns/v1alpha2/projects/{project}/policies",
          "httpMethod": "GET",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "maxResults": {
              "description": "! Optional. Maximum number of results to be returned. If unspecified, the\n! server will decide how many results to return.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "! Optional. A tag returned by a previous list request that was truncated.\n! Use this parameter to continue a previous list request.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project"
          ],
          "response": {
            "$ref": "PoliciesListResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloud-platform.read-only",
            "https://www.googleapis.com/auth/ndev.clouddns.readonly",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Enumerate all Policies associated with a project."
        },
        "delete": {
          "id": "dns.policies.delete",
          "path": "dns/v1alpha2/projects/{project}/policies/{policy}",
          "flatPath": "dns/v1alpha2/projects/{project}/policies/{policy}",
          "httpMethod": "DELETE",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "policy": {
              "description": "! User given friendly name of the policy addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "policy"
          ],
          "response": {
            "$ref": "PoliciesDeleteResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Delete a previously created Policy. Will fail if the policy is still being\n! referenced by a network."
        },
        "patch": {
          "id": "dns.policies.patch",
          "path": "dns/v1alpha2/projects/{project}/policies/{policy}",
          "flatPath": "dns/v1alpha2/projects/{project}/policies/{policy}",
          "httpMethod": "PATCH",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "policy": {
              "description": "! User given friendly name of the policy addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "policy"
          ],
          "request": {
            "$ref": "Policy"
          },
          "response": {
            "$ref": "PoliciesPatchResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Apply a partial update to an existing Policy."
        },
        "update": {
          "id": "dns.policies.update",
          "path": "dns/v1alpha2/projects/{project}/policies/{policy}",
          "flatPath": "dns/v1alpha2/projects/{project}/policies/{policy}",
          "httpMethod": "PUT",
          "parameters": {
            "project": {
              "description": "! Identifies the project addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "policy": {
              "description": "! User given friendly name of the policy addressed by this request.",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "clientOperationId": {
              "description": "! For mutating operation requests only. An optional identifier\n! specified by the client. Must be unique for operation resources in the\n! Operations collection.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [
            "project",
            "policy"
          ],
          "request": {
            "$ref": "Policy"
          },
          "response": {
            "$ref": "PoliciesUpdateResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/ndev.clouddns.readwrite"
          ],
          "description": "! Update an existing Policy."
        }
      }
    }
  },
  "basePath": ""
}