"""Generated client library for buildartifacts version v1alpha2."""
# NOTE: This file is autogenerated and should not be edited by hand.
from apitools.base.py import base_api
from googlecloudsdk.third_party.apis.buildartifacts.v1alpha2 import buildartifacts_v1alpha2_messages as messages


class BuildartifactsV1alpha2(base_api.BaseApiClient):
  """Generated client library for service buildartifacts version v1alpha2."""

  MESSAGES_MODULE = messages
  BASE_URL = u'https://buildartifacts.googleapis.com/'

  _PACKAGE = u'buildartifacts'
  _SCOPES = [u'https://www.googleapis.com/auth/cloud-platform', u'https://www.googleapis.com/auth/cloud-platform.read-only']
  _VERSION = u'v1alpha2'
  _CLIENT_ID = '1042881264118.apps.googleusercontent.com'
  _CLIENT_SECRET = 'x_Tw5K8nnjoRAqULM9PFAC2b'
  _USER_AGENT = 'x_Tw5K8nnjoRAqULM9PFAC2b'
  _CLIENT_CLASS_NAME = u'BuildartifactsV1alpha2'
  _URL_VERSION = u'v1alpha2'
  _API_KEY = None

  def __init__(self, url='', credentials=None,
               get_credentials=True, http=None, model=None,
               log_request=False, log_response=False,
               credentials_args=None, default_global_params=None,
               additional_http_headers=None, response_encoding=None):
    """Create a new buildartifacts handle."""
    url = url or self.BASE_URL
    super(BuildartifactsV1alpha2, self).__init__(
        url, credentials=credentials,
        get_credentials=get_credentials, http=http, model=model,
        log_request=log_request, log_response=log_response,
        credentials_args=credentials_args,
        default_global_params=default_global_params,
        additional_http_headers=additional_http_headers,
        response_encoding=response_encoding)
    self.projects_operations = self.ProjectsOperationsService(self)
    self.projects_repositories_files = self.ProjectsRepositoriesFilesService(self)
    self.projects_repositories_packages_tags = self.ProjectsRepositoriesPackagesTagsService(self)
    self.projects_repositories_packages_versions = self.ProjectsRepositoriesPackagesVersionsService(self)
    self.projects_repositories_packages = self.ProjectsRepositoriesPackagesService(self)
    self.projects_repositories = self.ProjectsRepositoriesService(self)
    self.projects = self.ProjectsService(self)

  class ProjectsOperationsService(base_api.BaseApiService):
    """Service class for the projects_operations resource."""

    _NAME = u'projects_operations'

    def __init__(self, client):
      super(BuildartifactsV1alpha2.ProjectsOperationsService, self).__init__(client)
      self._upload_configs = {
          }

    def Get(self, request, global_params=None):
      r"""Gets the latest state of a long-running operation.  Clients can use this.
method to poll the operation result at intervals as recommended by the API
service.

      Args:
        request: (BuildartifactsProjectsOperationsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Operation) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    Get.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/operations/{operationsId}',
        http_method=u'GET',
        method_id=u'buildartifacts.projects.operations.get',
        ordered_params=[u'name'],
        path_params=[u'name'],
        query_params=[],
        relative_path=u'v1alpha2/{+name}',
        request_field='',
        request_type_name=u'BuildartifactsProjectsOperationsGetRequest',
        response_type_name=u'Operation',
        supports_download=False,
    )

    def List(self, request, global_params=None):
      r"""Lists operations that match the specified filter in the request. If the.
server doesn't support this method, it returns `UNIMPLEMENTED`.

NOTE: the `name` binding allows API services to override the binding
to use different resource name schemes, such as `users/*/operations`. To
override the binding, API services can add a binding such as
`"/v1/{name=users/*}/operations"` to their service configuration.
For backwards compatibility, the default name includes the operations
collection id, however overriding users must ensure the name binding
is the parent resource, without the operations collection id.

      Args:
        request: (BuildartifactsProjectsOperationsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ListOperationsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    List.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/operations',
        http_method=u'GET',
        method_id=u'buildartifacts.projects.operations.list',
        ordered_params=[u'name'],
        path_params=[u'name'],
        query_params=[u'filter', u'pageSize', u'pageToken'],
        relative_path=u'v1alpha2/{+name}/operations',
        request_field='',
        request_type_name=u'BuildartifactsProjectsOperationsListRequest',
        response_type_name=u'ListOperationsResponse',
        supports_download=False,
    )

  class ProjectsRepositoriesFilesService(base_api.BaseApiService):
    """Service class for the projects_repositories_files resource."""

    _NAME = u'projects_repositories_files'

    def __init__(self, client):
      super(BuildartifactsV1alpha2.ProjectsRepositoriesFilesService, self).__init__(client)
      self._upload_configs = {
          }

    def Get(self, request, global_params=None):
      r"""Gets a file.

      Args:
        request: (BuildartifactsProjectsRepositoriesFilesGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (File) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    Get.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}/files/{filesId}',
        http_method=u'GET',
        method_id=u'buildartifacts.projects.repositories.files.get',
        ordered_params=[u'name'],
        path_params=[u'name'],
        query_params=[],
        relative_path=u'v1alpha2/{+name}',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesFilesGetRequest',
        response_type_name=u'File',
        supports_download=False,
    )

    def List(self, request, global_params=None):
      r"""Lists files.

      Args:
        request: (BuildartifactsProjectsRepositoriesFilesListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ListFilesResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    List.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}/files',
        http_method=u'GET',
        method_id=u'buildartifacts.projects.repositories.files.list',
        ordered_params=[u'parent'],
        path_params=[u'parent'],
        query_params=[u'filter', u'pageSize', u'pageToken'],
        relative_path=u'v1alpha2/{+parent}/files',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesFilesListRequest',
        response_type_name=u'ListFilesResponse',
        supports_download=False,
    )

  class ProjectsRepositoriesPackagesTagsService(base_api.BaseApiService):
    """Service class for the projects_repositories_packages_tags resource."""

    _NAME = u'projects_repositories_packages_tags'

    def __init__(self, client):
      super(BuildartifactsV1alpha2.ProjectsRepositoriesPackagesTagsService, self).__init__(client)
      self._upload_configs = {
          }

    def Create(self, request, global_params=None):
      r"""Creates a tag.

      Args:
        request: (BuildartifactsProjectsRepositoriesPackagesTagsCreateRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Tag) The response message.
      """
      config = self.GetMethodConfig('Create')
      return self._RunMethod(
          config, request, global_params=global_params)

    Create.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}/packages/{packagesId}/tags',
        http_method=u'POST',
        method_id=u'buildartifacts.projects.repositories.packages.tags.create',
        ordered_params=[u'parent'],
        path_params=[u'parent'],
        query_params=[u'tagId'],
        relative_path=u'v1alpha2/{+parent}/tags',
        request_field=u'tag',
        request_type_name=u'BuildartifactsProjectsRepositoriesPackagesTagsCreateRequest',
        response_type_name=u'Tag',
        supports_download=False,
    )

    def Delete(self, request, global_params=None):
      r"""Deletes a tag.

      Args:
        request: (BuildartifactsProjectsRepositoriesPackagesTagsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Empty) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    Delete.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}',
        http_method=u'DELETE',
        method_id=u'buildartifacts.projects.repositories.packages.tags.delete',
        ordered_params=[u'name'],
        path_params=[u'name'],
        query_params=[],
        relative_path=u'v1alpha2/{+name}',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesPackagesTagsDeleteRequest',
        response_type_name=u'Empty',
        supports_download=False,
    )

    def Get(self, request, global_params=None):
      r"""Gets a tag.

      Args:
        request: (BuildartifactsProjectsRepositoriesPackagesTagsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Tag) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    Get.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}',
        http_method=u'GET',
        method_id=u'buildartifacts.projects.repositories.packages.tags.get',
        ordered_params=[u'name'],
        path_params=[u'name'],
        query_params=[],
        relative_path=u'v1alpha2/{+name}',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesPackagesTagsGetRequest',
        response_type_name=u'Tag',
        supports_download=False,
    )

    def List(self, request, global_params=None):
      r"""Lists tags.

      Args:
        request: (BuildartifactsProjectsRepositoriesPackagesTagsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ListTagsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    List.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}/packages/{packagesId}/tags',
        http_method=u'GET',
        method_id=u'buildartifacts.projects.repositories.packages.tags.list',
        ordered_params=[u'parent'],
        path_params=[u'parent'],
        query_params=[u'filter', u'pageSize', u'pageToken'],
        relative_path=u'v1alpha2/{+parent}/tags',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesPackagesTagsListRequest',
        response_type_name=u'ListTagsResponse',
        supports_download=False,
    )

    def Patch(self, request, global_params=None):
      r"""Updates a tag.

      Args:
        request: (BuildartifactsProjectsRepositoriesPackagesTagsPatchRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Tag) The response message.
      """
      config = self.GetMethodConfig('Patch')
      return self._RunMethod(
          config, request, global_params=global_params)

    Patch.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}',
        http_method=u'PATCH',
        method_id=u'buildartifacts.projects.repositories.packages.tags.patch',
        ordered_params=[u'name'],
        path_params=[u'name'],
        query_params=[u'updateMask'],
        relative_path=u'v1alpha2/{+name}',
        request_field=u'tag',
        request_type_name=u'BuildartifactsProjectsRepositoriesPackagesTagsPatchRequest',
        response_type_name=u'Tag',
        supports_download=False,
    )

  class ProjectsRepositoriesPackagesVersionsService(base_api.BaseApiService):
    """Service class for the projects_repositories_packages_versions resource."""

    _NAME = u'projects_repositories_packages_versions'

    def __init__(self, client):
      super(BuildartifactsV1alpha2.ProjectsRepositoriesPackagesVersionsService, self).__init__(client)
      self._upload_configs = {
          }

    def Delete(self, request, global_params=None):
      r"""Deletes a version and all of its content.

      Args:
        request: (BuildartifactsProjectsRepositoriesPackagesVersionsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Empty) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    Delete.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}/packages/{packagesId}/versions/{versionsId}',
        http_method=u'DELETE',
        method_id=u'buildartifacts.projects.repositories.packages.versions.delete',
        ordered_params=[u'name'],
        path_params=[u'name'],
        query_params=[u'force'],
        relative_path=u'v1alpha2/{+name}',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesPackagesVersionsDeleteRequest',
        response_type_name=u'Empty',
        supports_download=False,
    )

    def Get(self, request, global_params=None):
      r"""Gets a version.

      Args:
        request: (BuildartifactsProjectsRepositoriesPackagesVersionsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Version) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    Get.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}/packages/{packagesId}/versions/{versionsId}',
        http_method=u'GET',
        method_id=u'buildartifacts.projects.repositories.packages.versions.get',
        ordered_params=[u'name'],
        path_params=[u'name'],
        query_params=[],
        relative_path=u'v1alpha2/{+name}',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesPackagesVersionsGetRequest',
        response_type_name=u'Version',
        supports_download=False,
    )

    def List(self, request, global_params=None):
      r"""Lists versions.

      Args:
        request: (BuildartifactsProjectsRepositoriesPackagesVersionsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ListVersionsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    List.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}/packages/{packagesId}/versions',
        http_method=u'GET',
        method_id=u'buildartifacts.projects.repositories.packages.versions.list',
        ordered_params=[u'parent'],
        path_params=[u'parent'],
        query_params=[u'pageSize', u'pageToken'],
        relative_path=u'v1alpha2/{+parent}/versions',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesPackagesVersionsListRequest',
        response_type_name=u'ListVersionsResponse',
        supports_download=False,
    )

  class ProjectsRepositoriesPackagesService(base_api.BaseApiService):
    """Service class for the projects_repositories_packages resource."""

    _NAME = u'projects_repositories_packages'

    def __init__(self, client):
      super(BuildartifactsV1alpha2.ProjectsRepositoriesPackagesService, self).__init__(client)
      self._upload_configs = {
          }

    def Delete(self, request, global_params=None):
      r"""Deletes a package and all of its versions and tags.

      Args:
        request: (BuildartifactsProjectsRepositoriesPackagesDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Empty) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    Delete.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}/packages/{packagesId}',
        http_method=u'DELETE',
        method_id=u'buildartifacts.projects.repositories.packages.delete',
        ordered_params=[u'name'],
        path_params=[u'name'],
        query_params=[],
        relative_path=u'v1alpha2/{+name}',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesPackagesDeleteRequest',
        response_type_name=u'Empty',
        supports_download=False,
    )

    def Get(self, request, global_params=None):
      r"""Gets a package.

      Args:
        request: (BuildartifactsProjectsRepositoriesPackagesGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Package) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    Get.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}/packages/{packagesId}',
        http_method=u'GET',
        method_id=u'buildartifacts.projects.repositories.packages.get',
        ordered_params=[u'name'],
        path_params=[u'name'],
        query_params=[],
        relative_path=u'v1alpha2/{+name}',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesPackagesGetRequest',
        response_type_name=u'Package',
        supports_download=False,
    )

    def List(self, request, global_params=None):
      r"""Lists packages.

      Args:
        request: (BuildartifactsProjectsRepositoriesPackagesListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ListPackagesResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    List.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}/packages',
        http_method=u'GET',
        method_id=u'buildartifacts.projects.repositories.packages.list',
        ordered_params=[u'parent'],
        path_params=[u'parent'],
        query_params=[u'pageSize', u'pageToken'],
        relative_path=u'v1alpha2/{+parent}/packages',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesPackagesListRequest',
        response_type_name=u'ListPackagesResponse',
        supports_download=False,
    )

  class ProjectsRepositoriesService(base_api.BaseApiService):
    """Service class for the projects_repositories resource."""

    _NAME = u'projects_repositories'

    def __init__(self, client):
      super(BuildartifactsV1alpha2.ProjectsRepositoriesService, self).__init__(client)
      self._upload_configs = {
          }

    def Create(self, request, global_params=None):
      r"""Creates a repository. The returned Operation will finish once the.
repository has been created. Its response will be the created Repository.

      Args:
        request: (BuildartifactsProjectsRepositoriesCreateRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Operation) The response message.
      """
      config = self.GetMethodConfig('Create')
      return self._RunMethod(
          config, request, global_params=global_params)

    Create.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories',
        http_method=u'POST',
        method_id=u'buildartifacts.projects.repositories.create',
        ordered_params=[u'parent'],
        path_params=[u'parent'],
        query_params=[u'repositoryId'],
        relative_path=u'v1alpha2/{+parent}/repositories',
        request_field=u'repository',
        request_type_name=u'BuildartifactsProjectsRepositoriesCreateRequest',
        response_type_name=u'Operation',
        supports_download=False,
    )

    def Delete(self, request, global_params=None):
      r"""Deletes a repository and all of its contents. The returned Operation will.
finish once the repository has been deleted. It will not have any Operation
metadata and will return a google.protobuf.Empty response.

      Args:
        request: (BuildartifactsProjectsRepositoriesDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Operation) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    Delete.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}',
        http_method=u'DELETE',
        method_id=u'buildartifacts.projects.repositories.delete',
        ordered_params=[u'name'],
        path_params=[u'name'],
        query_params=[],
        relative_path=u'v1alpha2/{+name}',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesDeleteRequest',
        response_type_name=u'Operation',
        supports_download=False,
    )

    def Get(self, request, global_params=None):
      r"""Gets a repository.

      Args:
        request: (BuildartifactsProjectsRepositoriesGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Repository) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    Get.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}',
        http_method=u'GET',
        method_id=u'buildartifacts.projects.repositories.get',
        ordered_params=[u'name'],
        path_params=[u'name'],
        query_params=[],
        relative_path=u'v1alpha2/{+name}',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesGetRequest',
        response_type_name=u'Repository',
        supports_download=False,
    )

    def GetIamPolicy(self, request, global_params=None):
      r"""Gets the IAM policy for a given resource.

      Args:
        request: (BuildartifactsProjectsRepositoriesGetIamPolicyRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Policy) The response message.
      """
      config = self.GetMethodConfig('GetIamPolicy')
      return self._RunMethod(
          config, request, global_params=global_params)

    GetIamPolicy.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}:getIamPolicy',
        http_method=u'GET',
        method_id=u'buildartifacts.projects.repositories.getIamPolicy',
        ordered_params=[u'resource'],
        path_params=[u'resource'],
        query_params=[u'options_requestedPolicyVersion'],
        relative_path=u'v1alpha2/{+resource}:getIamPolicy',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesGetIamPolicyRequest',
        response_type_name=u'Policy',
        supports_download=False,
    )

    def List(self, request, global_params=None):
      r"""Lists repositories.

      Args:
        request: (BuildartifactsProjectsRepositoriesListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ListRepositoriesResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    List.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories',
        http_method=u'GET',
        method_id=u'buildartifacts.projects.repositories.list',
        ordered_params=[u'parent'],
        path_params=[u'parent'],
        query_params=[u'pageSize', u'pageToken'],
        relative_path=u'v1alpha2/{+parent}/repositories',
        request_field='',
        request_type_name=u'BuildartifactsProjectsRepositoriesListRequest',
        response_type_name=u'ListRepositoriesResponse',
        supports_download=False,
    )

    def Patch(self, request, global_params=None):
      r"""Updates a repository.

      Args:
        request: (BuildartifactsProjectsRepositoriesPatchRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Repository) The response message.
      """
      config = self.GetMethodConfig('Patch')
      return self._RunMethod(
          config, request, global_params=global_params)

    Patch.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}',
        http_method=u'PATCH',
        method_id=u'buildartifacts.projects.repositories.patch',
        ordered_params=[u'name'],
        path_params=[u'name'],
        query_params=[u'updateMask'],
        relative_path=u'v1alpha2/{+name}',
        request_field=u'repository',
        request_type_name=u'BuildartifactsProjectsRepositoriesPatchRequest',
        response_type_name=u'Repository',
        supports_download=False,
    )

    def SetIamPolicy(self, request, global_params=None):
      r"""Updates the IAM policy for a given resource.

      Args:
        request: (BuildartifactsProjectsRepositoriesSetIamPolicyRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Policy) The response message.
      """
      config = self.GetMethodConfig('SetIamPolicy')
      return self._RunMethod(
          config, request, global_params=global_params)

    SetIamPolicy.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}:setIamPolicy',
        http_method=u'POST',
        method_id=u'buildartifacts.projects.repositories.setIamPolicy',
        ordered_params=[u'resource'],
        path_params=[u'resource'],
        query_params=[],
        relative_path=u'v1alpha2/{+resource}:setIamPolicy',
        request_field=u'setIamPolicyRequest',
        request_type_name=u'BuildartifactsProjectsRepositoriesSetIamPolicyRequest',
        response_type_name=u'Policy',
        supports_download=False,
    )

    def TestIamPermissions(self, request, global_params=None):
      r"""Tests if the caller has a list of permissions on a resource.

      Args:
        request: (BuildartifactsProjectsRepositoriesTestIamPermissionsRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (TestIamPermissionsResponse) The response message.
      """
      config = self.GetMethodConfig('TestIamPermissions')
      return self._RunMethod(
          config, request, global_params=global_params)

    TestIamPermissions.method_config = lambda: base_api.ApiMethodInfo(
        flat_path=u'v1alpha2/projects/{projectsId}/repositories/{repositoriesId}:testIamPermissions',
        http_method=u'POST',
        method_id=u'buildartifacts.projects.repositories.testIamPermissions',
        ordered_params=[u'resource'],
        path_params=[u'resource'],
        query_params=[],
        relative_path=u'v1alpha2/{+resource}:testIamPermissions',
        request_field=u'testIamPermissionsRequest',
        request_type_name=u'BuildartifactsProjectsRepositoriesTestIamPermissionsRequest',
        response_type_name=u'TestIamPermissionsResponse',
        supports_download=False,
    )

  class ProjectsService(base_api.BaseApiService):
    """Service class for the projects resource."""

    _NAME = u'projects'

    def __init__(self, client):
      super(BuildartifactsV1alpha2.ProjectsService, self).__init__(client)
      self._upload_configs = {
          }
