{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "binaryauthorization:v1alpha2",
  "name": "binaryauthorization",
  "canonicalName": "Binary Authorization",
  "version": "v1alpha2",
  "revision": "0",
  "title": "Binary Authorization API",
  "description": "The management interface for Binary Authorization, a system providing policy control for images deployed to Kubernetes Engine clusters.\n",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "https://cloud.google.com/binary-authorization/",
  "protocol": "rest",
  "rootUrl": "https://binaryauthorization.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://binaryauthorization.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "schemas": {
    "TestAttestationOccurrenceRequest": {
      "id": "TestAttestationOccurrenceRequest",
      "description": "Request message for\nValidationHelperV1Alpha2.TestAttestationOccurrence.",
      "type": "object",
      "properties": {
        "attestation": {
          "description": "Required. An AttestationOccurrence to\nbe checked that it can be verified by the Attestor. It does not have to be\nan existing entity in Container Analysis. It must otherwise be a valid\nAttestationOccurrence.",
          "$ref": "AttestationOccurrence"
        },
        "occurrenceNoteName": {
          "description": "Required. The resource name of the Note to which the\ncontaining Occurrence is associated.",
          "type": "string"
        },
        "occurrenceResourceUri": {
          "description": "Required. The URI of the artifact (e.g. container image) that is the\nsubject of the containing Occurrence.",
          "type": "string"
        }
      }
    },
    "AttestationOccurrence": {
      "id": "AttestationOccurrence",
      "description": "Occurrence that represents a single \"attestation\". The authenticity of an\nattestation can be verified using the attached signature. If the verifier\ntrusts the public key of the signer, then verifying the signature is\nsufficient to establish trust. In this circumstance, the authority to which\nthis attestation is attached is primarily useful for lookup (how to find\nthis attestation if you already know the authority and artifact to be\nverified) and intent (for which authority this attestation was intended to\nsign.",
      "type": "object",
      "properties": {
        "serializedPayload": {
          "description": "Required. The serialized payload that is verified by one or more\n`signatures`.",
          "type": "string",
          "format": "byte"
        },
        "signatures": {
          "description": "One or more signatures over `serialized_payload`.  Verifier implementations\nshould consider this attestation message verified if at least one\n`signature` verifies `serialized_payload`.  See `Signature` in common.proto\nfor more details on signature structure and verification.",
          "type": "array",
          "items": {
            "$ref": "Signature"
          }
        }
      }
    },
    "Signature": {
      "id": "Signature",
      "description": "Verifiers (e.g. Kritis implementations) MUST verify signatures\nwith respect to the trust anchors defined in policy (e.g. a Kritis policy).\nTypically this means that the verifier has been configured with a map from\n`public_key_id` to public key material (and any required parameters, e.g.\nsigning algorithm).\n\nIn particular, verification implementations MUST NOT treat the signature\n`public_key_id` as anything more than a key lookup hint. The `public_key_id`\nDOES NOT validate or authenticate a public key; it only provides a mechanism\nfor quickly selecting a public key ALREADY CONFIGURED on the verifier through\na trusted channel. Verification implementations MUST reject signatures in any\nof the following circumstances:\n  * The `public_key_id` is not recognized by the verifier.\n  * The public key that `public_key_id` refers to does not verify the\n    signature with respect to the payload.\n\nThe `signature` contents SHOULD NOT be \"attached\" (where the payload is\nincluded with the serialized `signature` bytes). Verifiers MUST ignore any\n\"attached\" payload and only verify signatures with respect to explicitly\nprovided payload (e.g. a `payload` field on the proto message that holds\nthis Signature, or the canonical serialization of the proto message that\nholds this signature).",
      "type": "object",
      "properties": {
        "signature": {
          "description": "The content of the signature, an opaque bytestring.\nThe payload that this signature verifies MUST be unambiguously provided\nwith the Signature during verification. A wrapper message might provide\nthe payload explicitly. Alternatively, a message might have a canonical\nserialization that can always be unambiguously computed to derive the\npayload.",
          "type": "string",
          "format": "byte"
        },
        "publicKeyId": {
          "description": "The identifier for the public key that verifies this signature.\n  * The `public_key_id` is required.\n  * The `public_key_id` MUST be an RFC3986 conformant URI.\n  * When possible, the `public_key_id` SHOULD be an immutable reference,\n    such as a cryptographic digest.\n\nExamples of valid `public_key_id`s:\n\nOpenPGP V4 public key fingerprint:\n  * \"openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA\"\nSee https:\/\/www.iana.org\/assignments\/uri-schemes\/prov\/openpgp4fpr for more\ndetails on this scheme.\n\nRFC6920 digest-named SubjectPublicKeyInfo (digest of the DER\nserialization):\n  * \"ni:\/\/\/sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU\"\n  * \"nih:\/\/\/sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5\"",
          "type": "string"
        }
      }
    },
    "TestAttestationOccurrenceResponse": {
      "id": "TestAttestationOccurrenceResponse",
      "description": "Response message for\nValidationHelperV1Alpha2.TestAttestationOccurrence.",
      "type": "object",
      "properties": {
        "result": {
          "description": "The result of the Attestation validation.",
          "enumDescriptions": [
            "Unspecified.",
            "The Attestation was able to verified by the Attestor.",
            "The Attestation was not able to verified by the Attestor."
          ],
          "type": "string",
          "enum": [
            "RESULT_UNSPECIFIED",
            "VERIFIED",
            "ATTESTATION_NOT_VERIFIABLE"
          ]
        },
        "denialReason": {
          "description": "The reason for denial if the Attestation couldn't be validated.",
          "type": "string"
        }
      }
    },
    "Policy": {
      "id": "Policy",
      "description": "A policy for container image binary authorization.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Output only. The resource name, in the format `projects\/*\/policy`. There is\nat most one policy per project.",
          "type": "string"
        },
        "description": {
          "description": "Optional. A descriptive comment.",
          "type": "string"
        },
        "globalPolicyEvaluationMode": {
          "description": "Optional. Controls the evaluation of a Google-maintained global admission\npolicy for common system-level images. Images not covered by the global\npolicy will be subject to the project admission policy. This setting\nhas no effect when specified inside a global admission policy.",
          "enumDescriptions": [
            "Not specified: DISABLE is assumed.",
            "Enables global policy evaluation.",
            "Disables global policy evaluation."
          ],
          "type": "string",
          "enum": [
            "GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED",
            "ENABLE",
            "DISABLE"
          ]
        },
        "admissionWhitelistPatterns": {
          "description": "Optional. Admission policy whitelisting. A matching admission request will\nalways be permitted. This feature is typically used to exclude Google or\nthird-party infrastructure images from Binary Authorization policies.",
          "type": "array",
          "items": {
            "$ref": "AdmissionWhitelistPattern"
          }
        },
        "clusterAdmissionRules": {
          "description": "Optional. Per-cluster admission rules. Cluster spec format:\n`location.clusterId`. There can be at most one admission rule per cluster\nspec.\nA `location` is either a compute zone (e.g. us-central1-a) or a region\n(e.g. us-central1).\nFor `clusterId` syntax restrictions see\nhttps:\/\/cloud.google.com\/container-engine\/reference\/rest\/v1\/projects.zones.clusters.",
          "type": "object",
          "additionalProperties": {
            "$ref": "AdmissionRule"
          }
        },
        "defaultAdmissionRule": {
          "description": "Required. Default admission rule for a cluster without a per-cluster, per-\nkubernetes-service-account, or per-istio-service-identity admission rule.",
          "$ref": "AdmissionRule"
        },
        "updateTime": {
          "description": "Output only. Time when the policy was last updated.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "AdmissionWhitelistPattern": {
      "id": "AdmissionWhitelistPattern",
      "description": "An admission whitelist pattern exempts images\nfrom checks by admission rules.",
      "type": "object",
      "properties": {
        "namePattern": {
          "description": "An image name pattern to whitelist, in the form `registry\/path\/to\/image`.\nThis supports a trailing `*` as a wildcard, but this is allowed only in\ntext after the `registry\/` part.",
          "type": "string"
        }
      }
    },
    "AdmissionRule": {
      "id": "AdmissionRule",
      "description": "An admission rule specifies either that all container images\nused in a pod creation request must be attested to by one or more\nattestors, that all pod creations will be allowed, or that all\npod creations will be denied.\n\nImages matching an admission whitelist pattern\nare exempted from admission rules and will never block a pod creation.",
      "type": "object",
      "properties": {
        "evaluationMode": {
          "description": "Required. How this admission rule will be evaluated.",
          "enumDescriptions": [
            "Do not use.",
            "This rule allows all all pod creations.",
            "This rule allows a pod creation if all the attestors listed in\n'require_attestations_by' have valid attestations for all of the\nimages in the pod spec.",
            "This rule denies all pod creations."
          ],
          "type": "string",
          "enum": [
            "EVALUATION_MODE_UNSPECIFIED",
            "ALWAYS_ALLOW",
            "REQUIRE_ATTESTATION",
            "ALWAYS_DENY"
          ]
        },
        "requireAttestationsBy": {
          "description": "Optional. The resource names of the attestors that must attest to\na container image, in the format `projects\/*\/attestors\/*`. Each\nattestor must exist before a policy can reference it.  To add an attestor\nto a policy the principal issuing the policy change request must be able\nto read the attestor resource.\n\nNote: this field must be non-empty when the evaluation_mode field specifies\nREQUIRE_ATTESTATION, otherwise it must be empty.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enforcementMode": {
          "description": "Required. The action when a pod creation is denied by the admission rule.",
          "enumDescriptions": [
            "Do not use.",
            "Enforce the admission rule by blocking the pod creation.",
            "Dryrun mode: Audit logging only.  This will allow the pod creation as if\nthe admission request had specified break-glass."
          ],
          "type": "string",
          "enum": [
            "ENFORCEMENT_MODE_UNSPECIFIED",
            "ENFORCED_BLOCK_AND_AUDIT_LOG",
            "DRYRUN_AUDIT_LOG_ONLY"
          ]
        }
      }
    },
    "Attestor": {
      "id": "Attestor",
      "description": "An attestor that attests to container image\nartifacts. An existing attestor cannot be modified except where\nindicated.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Required. The resource name, in the format:\n`projects\/*\/attestors\/*`. This field may not be updated.",
          "type": "string"
        },
        "description": {
          "description": "Optional. A descriptive comment.  This field may be updated.\nThe field may be displayed in chooser dialogs.",
          "type": "string"
        },
        "userOwnedDrydockNote": {
          "description": "A Drydock ATTESTATION_AUTHORITY Note, created by the user.",
          "$ref": "UserOwnedDrydockNote"
        },
        "updateTime": {
          "description": "Output only. Time when the attestor was last updated.",
          "type": "string",
          "format": "google-datetime"
        }
      }
    },
    "UserOwnedDrydockNote": {
      "id": "UserOwnedDrydockNote",
      "description": "An user owned drydock note references a Drydock\nATTESTATION_AUTHORITY Note created by the user.",
      "type": "object",
      "properties": {
        "noteReference": {
          "description": "Required. The Drydock resource name of a ATTESTATION_AUTHORITY Note,\ncreated by the user, in the format: `projects\/*\/notes\/*` (or the legacy\n`providers\/*\/notes\/*`). This field may not be updated.\n\nAn attestation by this attestor is stored as a Drydock\nATTESTATION_AUTHORITY Occurrence that names a container image and that\nlinks to this Note. Drydock is an external dependency.",
          "type": "string"
        },
        "publicKeys": {
          "description": "Optional. Public keys that verify attestations signed by this\nattestor.  This field may be updated.\n\nIf this field is non-empty, one of the specified public keys must\nverify that an attestation was signed by this attestor for the\nimage specified in the admission request.\n\nIf this field is empty, this attestor always returns that no\nvalid attestations exist.",
          "type": "array",
          "items": {
            "$ref": "AttestorPublicKey"
          }
        },
        "delegationServiceAccountEmail": {
          "description": "Output only. This field will contain the service account email address\nthat this Attestor will use as the principal when querying Container\nAnalysis. Attestor administrators must grant this service account the\nIAM role needed to read attestations from the note_reference in\nContainer Analysis (`containeranalysis.notes.occurrences.viewer`).\n\nThis email address is fixed for the lifetime of the Attestor, but callers\nshould not make any other assumptions about the service account email;\nfuture versions may use an email based on a different naming pattern.",
          "type": "string"
        }
      }
    },
    "AttestorPublicKey": {
      "id": "AttestorPublicKey",
      "description": "An attestor public key that will be used to verify\nattestations signed by this attestor.",
      "type": "object",
      "properties": {
        "comment": {
          "description": "Optional. A descriptive comment. This field may be updated.",
          "type": "string"
        },
        "id": {
          "description": "The ID of this public key.\nSignatures verified by BinAuthz must include the ID of the public key that\ncan be used to verify them, and that ID must match the contents of this\nfield exactly.\nAdditional restrictions on this field can be imposed based on which public\nkey type is encapsulated. See the documentation on `public_key` cases below\nfor details.",
          "type": "string"
        },
        "asciiArmoredPgpPublicKey": {
          "description": "ASCII-armored representation of a PGP public key, as the entire output by\nthe command `gpg --export --armor foo@example.com` (either LF or CRLF\nline endings).\nWhen using this field, `id` should be left blank.  The BinAuthz API\nhandlers will calculate the ID and fill it in automatically.  BinAuthz\ncomputes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as\nupper-case hex.  If `id` is provided by the caller, it will be\noverwritten by the API-calculated ID.",
          "type": "string"
        },
        "pkixPublicKey": {
          "description": "A raw PKIX SubjectPublicKeyInfo format public key.\n\nNOTE: `id` may be explicitly provided by the caller when using this\ntype of public key, but it MUST be a valid RFC3986 URI. If `id` is left\nblank, a default one will be computed based on the digest of the DER\nencoding of the public key.",
          "$ref": "PkixPublicKey"
        }
      }
    },
    "PkixPublicKey": {
      "id": "PkixPublicKey",
      "description": "A public key in the PkixPublicKey format (see\nhttps:\/\/tools.ietf.org\/html\/rfc5280#section-4.1.2.7 for details).\nPublic keys of this type are typically textually encoded using the PEM\nformat.",
      "type": "object",
      "properties": {
        "publicKeyPem": {
          "description": "A PEM-encoded public key, as described in\nhttps:\/\/tools.ietf.org\/html\/rfc7468#section-13",
          "type": "string"
        },
        "signatureAlgorithm": {
          "description": "The signature algorithm used to verify a message against a signature using\nthis key.\nThese signature algorithm must match the structure and any object\nidentifiers encoded in `public_key_pem` (i.e. this algorithm must match\nthat of the public key).",
          "enumDescriptions": [
            "Not specified.",
            "RSASSA-PSS 2048 bit key with a SHA256 digest.",
            "RSASSA-PSS 3072 bit key with a SHA256 digest.",
            "RSASSA-PSS 4096 bit key with a SHA256 digest.",
            "RSASSA-PSS 4096 bit key with a SHA512 digest.",
            "RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.",
            "RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.",
            "RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.",
            "RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.",
            "ECDSA on the NIST P-256 curve with a SHA256 digest.",
            "ECDSA on the NIST P-384 curve with a SHA384 digest.",
            "ECDSA on the NIST P-521 curve with a SHA512 digest."
          ],
          "type": "string",
          "enum": [
            "SIGNATURE_ALGORITHM_UNSPECIFIED",
            "RSA_PSS_2048_SHA256",
            "RSA_PSS_3072_SHA256",
            "RSA_PSS_4096_SHA256",
            "RSA_PSS_4096_SHA512",
            "RSA_SIGN_PKCS1_2048_SHA256",
            "RSA_SIGN_PKCS1_3072_SHA256",
            "RSA_SIGN_PKCS1_4096_SHA256",
            "RSA_SIGN_PKCS1_4096_SHA512",
            "ECDSA_P256_SHA256",
            "ECDSA_P384_SHA384",
            "ECDSA_P521_SHA512"
          ]
        }
      }
    },
    "ListAttestorsResponse": {
      "id": "ListAttestorsResponse",
      "description": "Response message for BinauthzManagementService.ListAttestors.",
      "type": "object",
      "properties": {
        "attestors": {
          "description": "The list of attestors.",
          "type": "array",
          "items": {
            "$ref": "Attestor"
          }
        },
        "nextPageToken": {
          "description": "A token to retrieve the next page of results. Pass this value in the\nListAttestorsRequest.page_token field in the subsequent call to the\n`ListAttestors` method to retrieve the next page of results.",
          "type": "string"
        }
      }
    },
    "Empty": {
      "id": "Empty",
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "type": "object",
      "properties": {
      }
    },
    "SetIamPolicyRequest": {
      "id": "SetIamPolicyRequest",
      "description": "Request message for `SetIamPolicy` method.",
      "type": "object",
      "properties": {
        "policy": {
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of\nthe policy is limited to a few 10s of KB. An empty policy is a\nvalid policy but certain Cloud Platform services (such as Projects)\nmight reject them.",
          "$ref": "IamPolicy"
        }
      }
    },
    "IamPolicy": {
      "id": "IamPolicy",
      "description": "Defines an Identity and Access Management (IAM) policy. It is used to\nspecify access control policies for Cloud Platform resources.\n\n\nA `Policy` is a collection of `bindings`. A `binding` binds one or more\n`members` to a single `role`. Members can be user accounts, service accounts,\nGoogle groups, and domains (such as G Suite). A `role` is a named list of\npermissions (defined by IAM or configured by users). A `binding` can\noptionally specify a `condition`, which is a logic expression that further\nconstrains the role binding based on attributes about the request and\/or\ntarget resource.\n\n**JSON Example**\n\n    {\n      \"bindings\": [\n        {\n          \"role\": \"roles\/resourcemanager.organizationAdmin\",\n          \"members\": [\n            \"user:mike@example.com\",\n            \"group:admins@example.com\",\n            \"domain:google.com\",\n            \"serviceAccount:my-project-id@appspot.gserviceaccount.com\"\n          ]\n        },\n        {\n          \"role\": \"roles\/resourcemanager.organizationViewer\",\n          \"members\": [\"user:eve@example.com\"],\n          \"condition\": {\n            \"title\": \"expirable access\",\n            \"description\": \"Does not grant access after Sep 2020\",\n            \"expression\": \"request.time <\n            timestamp('2020-10-01T00:00:00.000Z')\",\n          }\n        }\n      ]\n    }\n\n**YAML Example**\n\n    bindings:\n    - members:\n      - user:mike@example.com\n      - group:admins@example.com\n      - domain:google.com\n      - serviceAccount:my-project-id@appspot.gserviceaccount.com\n      role: roles\/resourcemanager.organizationAdmin\n    - members:\n      - user:eve@example.com\n      role: roles\/resourcemanager.organizationViewer\n      condition:\n        title: expirable access\n        description: Does not grant access after Sep 2020\n        expression: request.time < timestamp('2020-10-01T00:00:00.000Z')\n\nFor a description of IAM and its features, see the\n[IAM developer's guide](https:\/\/cloud.google.com\/iam\/docs).",
      "type": "object",
      "properties": {
        "version": {
          "description": "Specifies the format of the policy.\n\nValid values are 0, 1, and 3. Requests specifying an invalid value will be\nrejected.\n\nOperations affecting conditional bindings must specify version 3. This can\nbe either setting a conditional policy, modifying a conditional binding,\nor removing a conditional binding from the stored conditional policy.\nOperations on non-conditional policies may specify any valid value or\nleave the field unset.\n\nIf no etag is provided in the call to `setIamPolicy`, any version\ncompliance checks on the incoming and\/or stored policy is skipped.",
          "type": "integer",
          "format": "int32"
        },
        "bindings": {
          "description": "Associates a list of `members` to a `role`. Optionally may specify a\n`condition` that determines when binding is in effect.\n`bindings` with no members will result in an error.",
          "type": "array",
          "items": {
            "$ref": "Binding"
          }
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help\nprevent simultaneous updates of a policy from overwriting each other.\nIt is strongly suggested that systems make use of the `etag` in the\nread-modify-write cycle to perform policy updates in order to avoid race\nconditions: An `etag` is returned in the response to `getIamPolicy`, and\nsystems are expected to put that etag in the request to `setIamPolicy` to\nensure that their change will be applied to the same version of the policy.\n\nIf no `etag` is provided in the call to `setIamPolicy`, then the existing\npolicy is overwritten. Due to blind-set semantics of an etag-less policy,\n'setIamPolicy' will not fail even if either of incoming or stored policy\ndoes not meet the version requirements.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "Binding": {
      "id": "Binding",
      "description": "Associates `members` with a `role`.",
      "type": "object",
      "properties": {
        "role": {
          "description": "Role that is assigned to `members`.\nFor example, `roles\/viewer`, `roles\/editor`, or `roles\/owner`.",
          "type": "string"
        },
        "members": {
          "description": "Specifies the identities requesting access for a Cloud Platform resource.\n`members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is\n   on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone\n   who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google\n   account. For example, `alice@example.com` .\n\n\n* `serviceAccount:{emailid}`: An email address that represents a service\n   account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group.\n   For example, `admins@example.com`.\n\n\n* `domain:{domain}`: The G Suite domain (primary) that represents all the\n   users of that domain. For example, `google.com` or `example.com`.\n\n",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "description": "The condition that is associated with this binding.\nNOTE: An unsatisfied condition will not allow user access via current\nbinding. Different bindings, including their conditions, are examined\nindependently.",
          "$ref": "Expr"
        }
      }
    },
    "Expr": {
      "id": "Expr",
      "description": "Represents an expression text. Example:\n\n    title: \"User account presence\"\n    description: \"Determines whether the request has a user account\"\n    expression: \"size(request.user) > 0\"",
      "type": "object",
      "properties": {
        "expression": {
          "description": "Textual representation of an expression in\nCommon Expression Language syntax.\n\nThe application context of the containing message determines which\nwell-known feature set of CEL is supported.",
          "type": "string"
        },
        "title": {
          "description": "An optional title for the expression, i.e. a short string describing\nits purpose. This can be used e.g. in UIs which allow to enter the\nexpression.",
          "type": "string"
        },
        "description": {
          "description": "An optional description of the expression. This is a longer text which\ndescribes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "location": {
          "description": "An optional string indicating the location of the expression for error\nreporting, e.g. a file name and a position in the file.",
          "type": "string"
        }
      }
    },
    "TestIamPermissionsRequest": {
      "id": "TestIamPermissionsRequest",
      "description": "Request message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with\nwildcards (such as '*' or 'storage.*') are not allowed. For more\ninformation see\n[IAM Overview](https:\/\/cloud.google.com\/iam\/docs\/overview#permissions).",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "TestIamPermissionsResponse": {
      "id": "TestIamPermissionsResponse",
      "description": "Response message for `TestIamPermissions` method.",
      "type": "object",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is\nallowed.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "resources": {
    "projects": {
      "methods": {
        "getPolicy": {
          "id": "binaryauthorization.projects.getPolicy",
          "path": "v1alpha2/{+name}",
          "flatPath": "v1alpha2/projects/{projectsId}/policy",
          "httpMethod": "GET",
          "parameters": {
            "name": {
              "description": "Required. The resource name of the policy to retrieve,\nin the format `projects\/*\/policy`.",
              "location": "path",
              "required": true,
              "pattern": "^projects\/[^\/]+\/policy$",
              "type": "string"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "response": {
            "$ref": "Policy"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "A policy specifies the attestors that must attest to\na container image, before the project is allowed to deploy that\nimage. There is at most one policy per project. All image admission\nrequests are permitted if a project has no policy.\n\nGets the policy for this project. Returns a default\npolicy if the project does not have one."
        },
        "updatePolicy": {
          "id": "binaryauthorization.projects.updatePolicy",
          "path": "v1alpha2/{+name}",
          "flatPath": "v1alpha2/projects/{projectsId}/policy",
          "httpMethod": "PUT",
          "parameters": {
            "name": {
              "description": "Output only. The resource name, in the format `projects\/*\/policy`. There is\nat most one policy per project.",
              "location": "path",
              "required": true,
              "pattern": "^projects\/[^\/]+\/policy$",
              "type": "string"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "request": {
            "$ref": "Policy"
          },
          "response": {
            "$ref": "Policy"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Creates or updates a project's policy, and returns a copy of the\nnew policy. A policy is always updated as a whole, to avoid race\nconditions with concurrent policy enforcement (or management!)\nrequests. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT\nif the request is malformed."
        }
      }
      ,
      "resources": {
        "attestors": {
          "methods": {
            "testAttestationOccurrence": {
              "id": "binaryauthorization.projects.attestors.testAttestationOccurrence",
              "path": "v1alpha2/{+name}:testAttestationOccurrence",
              "flatPath": "v1alpha2/projects/{projectsId}/attestors/{attestorsId}:testAttestationOccurrence",
              "httpMethod": "POST",
              "parameters": {
                "name": {
                  "description": "Required. The resource name of the Attestor of the\noccurrence, in the format\n`projects\/*\/attestors\/*`.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/attestors\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "TestAttestationOccurrenceRequest"
              },
              "response": {
                "$ref": "TestAttestationOccurrenceResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns whether the given Attestation for the given image URI\nwas signed by the given Attestor"
            },
            "create": {
              "id": "binaryauthorization.projects.attestors.create",
              "path": "v1alpha2/{+parent}/attestors",
              "flatPath": "v1alpha2/projects/{projectsId}/attestors",
              "httpMethod": "POST",
              "parameters": {
                "parent": {
                  "description": "Required. The parent of this attestor.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                },
                "attestorId": {
                  "description": "Required. The attestors ID.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "request": {
                "$ref": "Attestor"
              },
              "response": {
                "$ref": "Attestor"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Creates an attestor, and returns a copy of the new\nattestor. Returns NOT_FOUND if the project does not exist,\nINVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the\nattestor already exists."
            },
            "get": {
              "id": "binaryauthorization.projects.attestors.get",
              "path": "v1alpha2/{+name}",
              "flatPath": "v1alpha2/projects/{projectsId}/attestors/{attestorsId}",
              "httpMethod": "GET",
              "parameters": {
                "name": {
                  "description": "Required. The name of the attestor to retrieve, in the format\n`projects\/*\/attestors\/*`.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/attestors\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Attestor"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets an attestor.\nReturns NOT_FOUND if the attestor does not exist."
            },
            "update": {
              "id": "binaryauthorization.projects.attestors.update",
              "path": "v1alpha2/{+name}",
              "flatPath": "v1alpha2/projects/{projectsId}/attestors/{attestorsId}",
              "httpMethod": "PUT",
              "parameters": {
                "name": {
                  "description": "Required. The resource name, in the format:\n`projects\/*\/attestors\/*`. This field may not be updated.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/attestors\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "request": {
                "$ref": "Attestor"
              },
              "response": {
                "$ref": "Attestor"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Updates an attestor.\nReturns NOT_FOUND if the attestor does not exist."
            },
            "list": {
              "id": "binaryauthorization.projects.attestors.list",
              "path": "v1alpha2/{+parent}/attestors",
              "flatPath": "v1alpha2/projects/{projectsId}/attestors",
              "httpMethod": "GET",
              "parameters": {
                "parent": {
                  "description": "Required. The resource name of the project associated with the\nattestors, in the format `projects\/*`.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                },
                "pageSize": {
                  "description": "Requested page size. The server may return fewer results than requested. If\nunspecified, the server will pick an appropriate default.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                },
                "pageToken": {
                  "description": "A token identifying a page of results the server should return. Typically,\nthis is the value of ListAttestorsResponse.next_page_token returned\nfrom the previous call to the `ListAttestors` method.",
                  "location": "query",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "parent"
              ],
              "response": {
                "$ref": "ListAttestorsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Lists attestors.\nReturns INVALID_ARGUMENT if the project does not exist."
            },
            "delete": {
              "id": "binaryauthorization.projects.attestors.delete",
              "path": "v1alpha2/{+name}",
              "flatPath": "v1alpha2/projects/{projectsId}/attestors/{attestorsId}",
              "httpMethod": "DELETE",
              "parameters": {
                "name": {
                  "description": "Required. The name of the attestors to delete, in the format\n`projects\/*\/attestors\/*`.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/attestors\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "name"
              ],
              "response": {
                "$ref": "Empty"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Deletes an attestor. Returns NOT_FOUND if the\nattestor does not exist."
            },
            "setIamPolicy": {
              "id": "binaryauthorization.projects.attestors.setIamPolicy",
              "path": "v1alpha2/{+resource}:setIamPolicy",
              "flatPath": "v1alpha2/projects/{projectsId}/attestors/{attestorsId}:setIamPolicy",
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/attestors\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "response": {
                "$ref": "IamPolicy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Sets the access control policy on the specified resource. Replaces any\nexisting policy.\n\nCan return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED"
            },
            "getIamPolicy": {
              "id": "binaryauthorization.projects.attestors.getIamPolicy",
              "path": "v1alpha2/{+resource}:getIamPolicy",
              "flatPath": "v1alpha2/projects/{projectsId}/attestors/{attestorsId}:getIamPolicy",
              "httpMethod": "GET",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/attestors\/[^\/]+$",
                  "type": "string"
                },
                "options.requestedPolicyVersion": {
                  "description": "Optional. The policy format version to be returned.\n\nValid values are 0, 1, and 3. Requests specifying an invalid value will be\nrejected.\n\nRequests for policies with any conditional bindings must specify version 3.\nPolicies without any conditional bindings may specify any valid value or\nleave the field unset.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "response": {
                "$ref": "IamPolicy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets the access control policy for a resource.\nReturns an empty policy if the resource exists and does not have a policy\nset."
            },
            "testIamPermissions": {
              "id": "binaryauthorization.projects.attestors.testIamPermissions",
              "path": "v1alpha2/{+resource}:testIamPermissions",
              "flatPath": "v1alpha2/projects/{projectsId}/attestors/{attestorsId}:testIamPermissions",
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/attestors\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.\n\nNote: This operation is designed to be used for building permission-aware\nUIs and command-line tools, not for authorization checking. This operation\nmay \"fail open\" without warning."
            }
          }
          ,
          "resources": {
            "attestations": {
              "methods": {
                "setIamPolicy": {
                  "id": "binaryauthorization.projects.attestors.attestations.setIamPolicy",
                  "path": "v1alpha2/{+resource}:setIamPolicy",
                  "flatPath": "v1alpha2/projects/{projectsId}/attestors/{attestorsId}/attestations/{attestationsId}:setIamPolicy",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/attestors\/[^\/]+\/attestations\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "IamPolicy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Sets the access control policy on the specified resource. Replaces any\nexisting policy.\n\nCan return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED"
                },
                "getIamPolicy": {
                  "id": "binaryauthorization.projects.attestors.attestations.getIamPolicy",
                  "path": "v1alpha2/{+resource}:getIamPolicy",
                  "flatPath": "v1alpha2/projects/{projectsId}/attestors/{attestorsId}/attestations/{attestationsId}:getIamPolicy",
                  "httpMethod": "GET",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/attestors\/[^\/]+\/attestations\/[^\/]+$",
                      "type": "string"
                    },
                    "options.requestedPolicyVersion": {
                      "description": "Optional. The policy format version to be returned.\n\nValid values are 0, 1, and 3. Requests specifying an invalid value will be\nrejected.\n\nRequests for policies with any conditional bindings must specify version 3.\nPolicies without any conditional bindings may specify any valid value or\nleave the field unset.",
                      "location": "query",
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "response": {
                    "$ref": "IamPolicy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Gets the access control policy for a resource.\nReturns an empty policy if the resource exists and does not have a policy\nset."
                },
                "testIamPermissions": {
                  "id": "binaryauthorization.projects.attestors.attestations.testIamPermissions",
                  "path": "v1alpha2/{+resource}:testIamPermissions",
                  "flatPath": "v1alpha2/projects/{projectsId}/attestors/{attestorsId}/attestations/{attestationsId}:testIamPermissions",
                  "httpMethod": "POST",
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                      "location": "path",
                      "required": true,
                      "pattern": "^projects\/[^\/]+\/attestors\/[^\/]+\/attestations\/[^\/]+$",
                      "type": "string"
                    }
                  },
                  "parameterOrder": [
                    "resource"
                  ],
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ],
                  "description": "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.\n\nNote: This operation is designed to be used for building permission-aware\nUIs and command-line tools, not for authorization checking. This operation\nmay \"fail open\" without warning."
                }
              }
            }
          }
        },
        "policy": {
          "methods": {
            "setIamPolicy": {
              "id": "binaryauthorization.projects.policy.setIamPolicy",
              "path": "v1alpha2/{+resource}:setIamPolicy",
              "flatPath": "v1alpha2/projects/{projectsId}/policy:setIamPolicy",
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/policy$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "SetIamPolicyRequest"
              },
              "response": {
                "$ref": "IamPolicy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Sets the access control policy on the specified resource. Replaces any\nexisting policy.\n\nCan return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED"
            },
            "getIamPolicy": {
              "id": "binaryauthorization.projects.policy.getIamPolicy",
              "path": "v1alpha2/{+resource}:getIamPolicy",
              "flatPath": "v1alpha2/projects/{projectsId}/policy:getIamPolicy",
              "httpMethod": "GET",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/policy$",
                  "type": "string"
                },
                "options.requestedPolicyVersion": {
                  "description": "Optional. The policy format version to be returned.\n\nValid values are 0, 1, and 3. Requests specifying an invalid value will be\nrejected.\n\nRequests for policies with any conditional bindings must specify version 3.\nPolicies without any conditional bindings may specify any valid value or\nleave the field unset.",
                  "location": "query",
                  "type": "integer",
                  "format": "int32"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "response": {
                "$ref": "IamPolicy"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Gets the access control policy for a resource.\nReturns an empty policy if the resource exists and does not have a policy\nset."
            },
            "testIamPermissions": {
              "id": "binaryauthorization.projects.policy.testIamPermissions",
              "path": "v1alpha2/{+resource}:testIamPermissions",
              "flatPath": "v1alpha2/projects/{projectsId}/policy:testIamPermissions",
              "httpMethod": "POST",
              "parameters": {
                "resource": {
                  "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+\/policy$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "resource"
              ],
              "request": {
                "$ref": "TestIamPermissionsRequest"
              },
              "response": {
                "$ref": "TestIamPermissionsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ],
              "description": "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.\n\nNote: This operation is designed to be used for building permission-aware\nUIs and command-line tools, not for authorization checking. This operation\nmay \"fail open\" without warning."
            }
          }
        }
      }
    }
  },
  "basePath": ""
}