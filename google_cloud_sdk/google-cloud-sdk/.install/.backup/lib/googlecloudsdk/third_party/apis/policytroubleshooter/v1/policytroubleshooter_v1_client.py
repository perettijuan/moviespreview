"""Generated client library for policytroubleshooter version v1."""
# NOTE: This file is autogenerated and should not be edited by hand.
from apitools.base.py import base_api
from googlecloudsdk.third_party.apis.policytroubleshooter.v1 import policytroubleshooter_v1_messages as messages


class PolicytroubleshooterV1(base_api.BaseApiClient):
  """Generated client library for service policytroubleshooter version v1."""

  MESSAGES_MODULE = messages
  BASE_URL = u'https://policytroubleshooter.googleapis.com/'

  _PACKAGE = u'policytroubleshooter'
  _SCOPES = [u'https://www.googleapis.com/auth/cloud-platform']
  _VERSION = u'v1'
  _CLIENT_ID = '1042881264118.apps.googleusercontent.com'
  _CLIENT_SECRET = 'x_Tw5K8nnjoRAqULM9PFAC2b'
  _USER_AGENT = 'x_Tw5K8nnjoRAqULM9PFAC2b'
  _CLIENT_CLASS_NAME = u'PolicytroubleshooterV1'
  _URL_VERSION = u'v1'
  _API_KEY = None

  def __init__(self, url='', credentials=None,
               get_credentials=True, http=None, model=None,
               log_request=False, log_response=False,
               credentials_args=None, default_global_params=None,
               additional_http_headers=None, response_encoding=None):
    """Create a new policytroubleshooter handle."""
    url = url or self.BASE_URL
    super(PolicytroubleshooterV1, self).__init__(
        url, credentials=credentials,
        get_credentials=get_credentials, http=http, model=model,
        log_request=log_request, log_response=log_response,
        credentials_args=credentials_args,
        default_global_params=default_global_params,
        additional_http_headers=additional_http_headers,
        response_encoding=response_encoding)
    self.iam = self.IamService(self)

  class IamService(base_api.BaseApiService):
    """Service class for the iam resource."""

    _NAME = u'iam'

    def __init__(self, client):
      super(PolicytroubleshooterV1.IamService, self).__init__(client)
      self._upload_configs = {
          }

    def Troubleshoot(self, request, global_params=None):
      r"""Perform a check on whether a member is granted a permission.
on a resource and how that grant/deny is determined accordinga
to the resource's effective IAM policy interpretation.

      Args:
        request: (GoogleCloudPolicytroubleshooterV1TroubleshootIamPolicyRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudPolicytroubleshooterV1TroubleshootIamPolicyResponse) The response message.
      """
      config = self.GetMethodConfig('Troubleshoot')
      return self._RunMethod(
          config, request, global_params=global_params)

    Troubleshoot.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'policytroubleshooter.iam.troubleshoot',
        ordered_params=[],
        path_params=[],
        query_params=[],
        relative_path=u'v1/iam:troubleshoot',
        request_field='<request>',
        request_type_name=u'GoogleCloudPolicytroubleshooterV1TroubleshootIamPolicyRequest',
        response_type_name=u'GoogleCloudPolicytroubleshooterV1TroubleshootIamPolicyResponse',
        supports_download=False,
    )
