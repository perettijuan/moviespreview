{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "language:v1",
  "name": "language",
  "canonicalName": "Cloud Natural Language",
  "version": "v1",
  "revision": "0",
  "title": "Cloud Natural Language API",
  "description": "Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "https://cloud.google.com/natural-language/",
  "protocol": "rest",
  "rootUrl": "https://language.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://language.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-language": {
          "description": "Apply machine learning models to reveal the structure and meaning of text"
        },
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "schemas": {
    "AnalyzeSentimentRequest": {
      "id": "AnalyzeSentimentRequest",
      "description": "The sentiment analysis request message.",
      "type": "object",
      "properties": {
        "document": {
          "description": "Required. Input document.",
          "$ref": "Document"
        },
        "encodingType": {
          "description": "The encoding type used by the API to calculate sentence offsets.",
          "enumDescriptions": [
            "If `EncodingType` is not specified, encoding-dependent information (such as\n`begin_offset`) will be set at `-1`.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-8 encoding of the input. C++ and Go are examples of languages\nthat use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-16 encoding of the input. Java and JavaScript are examples of\nlanguages that use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-32 encoding of the input. Python is an example of a language\nthat uses this encoding natively."
          ],
          "type": "string",
          "enum": [
            "NONE",
            "UTF8",
            "UTF16",
            "UTF32"
          ]
        }
      }
    },
    "Document": {
      "id": "Document",
      "description": "################################################################ #\n\nRepresents the input to API methods.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Required. If the type is not set or is `TYPE_UNSPECIFIED`,\nreturns an `INVALID_ARGUMENT` error.",
          "enumDescriptions": [
            "The content type is not specified.",
            "Plain text",
            "HTML"
          ],
          "type": "string",
          "enum": [
            "TYPE_UNSPECIFIED",
            "PLAIN_TEXT",
            "HTML"
          ]
        },
        "content": {
          "description": "The content of the input in string format.\nCloud audit logging exempt since it is based on user data.",
          "type": "string"
        },
        "gcsContentUri": {
          "description": "The Google Cloud Storage URI where the file content is located.\nThis URI must be of the form: gs:\/\/bucket_name\/object_name. For more\ndetails, see https:\/\/cloud.google.com\/storage\/docs\/reference-uris.\nNOTE: Cloud Storage object versioning is not supported.",
          "type": "string"
        },
        "language": {
          "description": "The language of the document (if not specified, the language is\nautomatically detected). Both ISO and BCP-47 language codes are\naccepted.<br>\n[Language Support](\/natural-language\/docs\/languages)\nlists currently supported languages for each API method.\nIf the language (either specified by the caller or automatically detected)\nis not supported by the called API method, an `INVALID_ARGUMENT` error\nis returned.",
          "type": "string"
        }
      }
    },
    "AnalyzeSentimentResponse": {
      "id": "AnalyzeSentimentResponse",
      "description": "The sentiment analysis response message.",
      "type": "object",
      "properties": {
        "documentSentiment": {
          "description": "The overall sentiment of the input document.",
          "$ref": "Sentiment"
        },
        "language": {
          "description": "The language of the text, which will be the same as the language specified\nin the request or, if not specified, the automatically-detected language.\nSee Document.language field for more details.",
          "type": "string"
        },
        "sentences": {
          "description": "The sentiment for all the sentences in the document.",
          "type": "array",
          "items": {
            "$ref": "Sentence"
          }
        }
      }
    },
    "Sentiment": {
      "id": "Sentiment",
      "description": "Represents the feeling associated with the entire text or entities in\nthe text.",
      "type": "object",
      "properties": {
        "magnitude": {
          "description": "A non-negative number in the [0, +inf) range, which represents\nthe absolute magnitude of sentiment regardless of score (positive or\nnegative).",
          "type": "number",
          "format": "float"
        },
        "score": {
          "description": "Sentiment score between -1.0 (negative sentiment) and 1.0\n(positive sentiment).",
          "type": "number",
          "format": "float"
        }
      }
    },
    "Sentence": {
      "id": "Sentence",
      "description": "Represents a sentence in the input document.",
      "type": "object",
      "properties": {
        "text": {
          "description": "The sentence text.",
          "$ref": "TextSpan"
        },
        "sentiment": {
          "description": "For calls to AnalyzeSentiment or if\nAnnotateTextRequest.Features.extract_document_sentiment is set to\ntrue, this field will contain the sentiment for the sentence.",
          "$ref": "Sentiment"
        }
      }
    },
    "TextSpan": {
      "id": "TextSpan",
      "description": "Represents an output piece of text.",
      "type": "object",
      "properties": {
        "content": {
          "description": "The content of the output text.",
          "type": "string"
        },
        "beginOffset": {
          "description": "The API calculates the beginning offset of the content in the original\ndocument according to the EncodingType specified in the API request.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AnalyzeEntitiesRequest": {
      "id": "AnalyzeEntitiesRequest",
      "description": "The entity analysis request message.",
      "type": "object",
      "properties": {
        "document": {
          "description": "Required. Input document.",
          "$ref": "Document"
        },
        "encodingType": {
          "description": "The encoding type used by the API to calculate offsets.",
          "enumDescriptions": [
            "If `EncodingType` is not specified, encoding-dependent information (such as\n`begin_offset`) will be set at `-1`.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-8 encoding of the input. C++ and Go are examples of languages\nthat use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-16 encoding of the input. Java and JavaScript are examples of\nlanguages that use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-32 encoding of the input. Python is an example of a language\nthat uses this encoding natively."
          ],
          "type": "string",
          "enum": [
            "NONE",
            "UTF8",
            "UTF16",
            "UTF32"
          ]
        }
      }
    },
    "AnalyzeEntitiesResponse": {
      "id": "AnalyzeEntitiesResponse",
      "description": "The entity analysis response message.",
      "type": "object",
      "properties": {
        "entities": {
          "description": "The recognized entities in the input document.",
          "type": "array",
          "items": {
            "$ref": "Entity"
          }
        },
        "language": {
          "description": "The language of the text, which will be the same as the language specified\nin the request or, if not specified, the automatically-detected language.\nSee Document.language field for more details.",
          "type": "string"
        }
      }
    },
    "Entity": {
      "id": "Entity",
      "description": "Represents a phrase in the text that is a known entity, such as\na person, an organization, or location. The API associates information, such\nas salience and mentions, with entities.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The representative name for the entity.",
          "type": "string"
        },
        "type": {
          "description": "The entity type.",
          "enumDescriptions": [
            "Unknown",
            "Person",
            "Location",
            "Organization",
            "Event",
            "Artwork",
            "Consumer product",
            "Other types of entities",
            "Phone number\n\nThe metadata lists the phone number, formatted according to local\nconvention, plus whichever additional elements appear in the text:\n\n* `number` - the actual number, broken down into sections as per local\nconvention\n* `national_prefix` - country code, if detected\n* `area_code` - region or area code, if detected\n* `extension` - phone extension (to be dialed after connection), if\ndetected",
            "Address\n\nThe metadata identifies the street number and locality plus whichever\nadditional elements appear in the text:\n\n* `street_number` - street number\n* `locality` - city or town\n* `street_name` - street\/route name, if detected\n* `postal_code` - postal code, if detected\n* `country` - country, if detected<\n* `broad_region` - administrative area, such as the state, if detected\n* `narrow_region` - smaller administrative area, such as county, if\ndetected\n* `sublocality` - used in Asian addresses to demark a district within a\ncity, if detected",
            "Date\n\nThe metadata identifies the components of the date:\n\n* `year` - four digit year, if detected\n* `month` - two digit month number, if detected\n* `day` - two digit day number, if detected",
            "Number\n\nThe metadata is the number itself.",
            "Price\n\nThe metadata identifies the `value` and `currency`."
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "PERSON",
            "LOCATION",
            "ORGANIZATION",
            "EVENT",
            "WORK_OF_ART",
            "CONSUMER_GOOD",
            "OTHER",
            "PHONE_NUMBER",
            "ADDRESS",
            "DATE",
            "NUMBER",
            "PRICE"
          ]
        },
        "metadata": {
          "description": "Metadata associated with the entity.\n\nFor most entity types, the metadata is a Wikipedia URL (`wikipedia_url`)\nand Knowledge Graph MID (`mid`), if they are available. For the metadata\nassociated with other entity types, see the Type table below.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "salience": {
          "description": "The salience score associated with the entity in the [0, 1.0] range.\n\nThe salience score for an entity provides information about the\nimportance or centrality of that entity to the entire document text.\nScores closer to 0 are less salient, while scores closer to 1.0 are highly\nsalient.",
          "type": "number",
          "format": "float"
        },
        "mentions": {
          "description": "The mentions of this entity in the input document. The API currently\nsupports proper noun mentions.",
          "type": "array",
          "items": {
            "$ref": "EntityMention"
          }
        },
        "sentiment": {
          "description": "For calls to AnalyzeEntitySentiment or if\nAnnotateTextRequest.Features.extract_entity_sentiment is set to\ntrue, this field will contain the aggregate sentiment expressed for this\nentity in the provided document.",
          "$ref": "Sentiment"
        }
      }
    },
    "EntityMention": {
      "id": "EntityMention",
      "description": "Represents a mention for an entity in the text. Currently, proper noun\nmentions are supported.",
      "type": "object",
      "properties": {
        "text": {
          "description": "The mention text.",
          "$ref": "TextSpan"
        },
        "type": {
          "description": "The type of the entity mention.",
          "enumDescriptions": [
            "Unknown",
            "Proper name",
            "Common noun (or noun compound)"
          ],
          "type": "string",
          "enum": [
            "TYPE_UNKNOWN",
            "PROPER",
            "COMMON"
          ]
        },
        "sentiment": {
          "description": "For calls to AnalyzeEntitySentiment or if\nAnnotateTextRequest.Features.extract_entity_sentiment is set to\ntrue, this field will contain the sentiment expressed for this mention of\nthe entity in the provided document.",
          "$ref": "Sentiment"
        }
      }
    },
    "AnalyzeEntitySentimentRequest": {
      "id": "AnalyzeEntitySentimentRequest",
      "description": "The entity-level sentiment analysis request message.",
      "type": "object",
      "properties": {
        "document": {
          "description": "Required. Input document.",
          "$ref": "Document"
        },
        "encodingType": {
          "description": "The encoding type used by the API to calculate offsets.",
          "enumDescriptions": [
            "If `EncodingType` is not specified, encoding-dependent information (such as\n`begin_offset`) will be set at `-1`.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-8 encoding of the input. C++ and Go are examples of languages\nthat use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-16 encoding of the input. Java and JavaScript are examples of\nlanguages that use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-32 encoding of the input. Python is an example of a language\nthat uses this encoding natively."
          ],
          "type": "string",
          "enum": [
            "NONE",
            "UTF8",
            "UTF16",
            "UTF32"
          ]
        }
      }
    },
    "AnalyzeEntitySentimentResponse": {
      "id": "AnalyzeEntitySentimentResponse",
      "description": "The entity-level sentiment analysis response message.",
      "type": "object",
      "properties": {
        "entities": {
          "description": "The recognized entities in the input document with associated sentiments.",
          "type": "array",
          "items": {
            "$ref": "Entity"
          }
        },
        "language": {
          "description": "The language of the text, which will be the same as the language specified\nin the request or, if not specified, the automatically-detected language.\nSee Document.language field for more details.",
          "type": "string"
        }
      }
    },
    "AnalyzeSyntaxRequest": {
      "id": "AnalyzeSyntaxRequest",
      "description": "The syntax analysis request message.",
      "type": "object",
      "properties": {
        "document": {
          "description": "Required. Input document.",
          "$ref": "Document"
        },
        "encodingType": {
          "description": "The encoding type used by the API to calculate offsets.",
          "enumDescriptions": [
            "If `EncodingType` is not specified, encoding-dependent information (such as\n`begin_offset`) will be set at `-1`.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-8 encoding of the input. C++ and Go are examples of languages\nthat use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-16 encoding of the input. Java and JavaScript are examples of\nlanguages that use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-32 encoding of the input. Python is an example of a language\nthat uses this encoding natively."
          ],
          "type": "string",
          "enum": [
            "NONE",
            "UTF8",
            "UTF16",
            "UTF32"
          ]
        }
      }
    },
    "AnalyzeSyntaxResponse": {
      "id": "AnalyzeSyntaxResponse",
      "description": "The syntax analysis response message.",
      "type": "object",
      "properties": {
        "sentences": {
          "description": "Sentences in the input document.",
          "type": "array",
          "items": {
            "$ref": "Sentence"
          }
        },
        "tokens": {
          "description": "Tokens, along with their syntactic information, in the input document.",
          "type": "array",
          "items": {
            "$ref": "Token"
          }
        },
        "language": {
          "description": "The language of the text, which will be the same as the language specified\nin the request or, if not specified, the automatically-detected language.\nSee Document.language field for more details.",
          "type": "string"
        }
      }
    },
    "Token": {
      "id": "Token",
      "description": "Represents the smallest syntactic building block of the text.",
      "type": "object",
      "properties": {
        "text": {
          "description": "The token text.",
          "$ref": "TextSpan"
        },
        "partOfSpeech": {
          "description": "Parts of speech tag for this token.",
          "$ref": "PartOfSpeech"
        },
        "dependencyEdge": {
          "description": "Dependency tree parse for this token.",
          "$ref": "DependencyEdge"
        },
        "lemma": {
          "description": "[Lemma](https:\/\/en.wikipedia.org\/wiki\/Lemma_%28morphology%29) of the token.",
          "type": "string"
        }
      }
    },
    "PartOfSpeech": {
      "id": "PartOfSpeech",
      "description": "Represents part of speech information for a token. Parts of speech\nare as defined in\nhttp:\/\/www.lrec-conf.org\/proceedings\/lrec2012\/pdf\/274_Paper.pdf",
      "type": "object",
      "properties": {
        "tag": {
          "description": "The part of speech tag.",
          "enumDescriptions": [
            "Unknown",
            "Adjective",
            "Adposition (preposition and postposition)",
            "Adverb",
            "Conjunction",
            "Determiner",
            "Noun (common and proper)",
            "Cardinal number",
            "Pronoun",
            "Particle or other function word",
            "Punctuation",
            "Verb (all tenses and modes)",
            "Other: foreign words, typos, abbreviations",
            "Affix"
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "ADJ",
            "ADP",
            "ADV",
            "CONJ",
            "DET",
            "NOUN",
            "NUM",
            "PRON",
            "PRT",
            "PUNCT",
            "VERB",
            "X",
            "AFFIX"
          ]
        },
        "aspect": {
          "description": "The grammatical aspect.",
          "enumDescriptions": [
            "Aspect is not applicable in the analyzed language or is not predicted.",
            "Perfective",
            "Imperfective",
            "Progressive"
          ],
          "type": "string",
          "enum": [
            "ASPECT_UNKNOWN",
            "PERFECTIVE",
            "IMPERFECTIVE",
            "PROGRESSIVE"
          ]
        },
        "case": {
          "description": "The grammatical case.",
          "enumDescriptions": [
            "Case is not applicable in the analyzed language or is not predicted.",
            "Accusative",
            "Adverbial",
            "Complementive",
            "Dative",
            "Genitive",
            "Instrumental",
            "Locative",
            "Nominative",
            "Oblique",
            "Partitive",
            "Prepositional",
            "Reflexive",
            "Relative",
            "Vocative"
          ],
          "type": "string",
          "enum": [
            "CASE_UNKNOWN",
            "ACCUSATIVE",
            "ADVERBIAL",
            "COMPLEMENTIVE",
            "DATIVE",
            "GENITIVE",
            "INSTRUMENTAL",
            "LOCATIVE",
            "NOMINATIVE",
            "OBLIQUE",
            "PARTITIVE",
            "PREPOSITIONAL",
            "REFLEXIVE_CASE",
            "RELATIVE_CASE",
            "VOCATIVE"
          ]
        },
        "form": {
          "description": "The grammatical form.",
          "enumDescriptions": [
            "Form is not applicable in the analyzed language or is not predicted.",
            "Adnomial",
            "Auxiliary",
            "Complementizer",
            "Final ending",
            "Gerund",
            "Realis",
            "Irrealis",
            "Short form",
            "Long form",
            "Order form",
            "Specific form"
          ],
          "type": "string",
          "enum": [
            "FORM_UNKNOWN",
            "ADNOMIAL",
            "AUXILIARY",
            "COMPLEMENTIZER",
            "FINAL_ENDING",
            "GERUND",
            "REALIS",
            "IRREALIS",
            "SHORT",
            "LONG",
            "ORDER",
            "SPECIFIC"
          ]
        },
        "gender": {
          "description": "The grammatical gender.",
          "enumDescriptions": [
            "Gender is not applicable in the analyzed language or is not predicted.",
            "Feminine",
            "Masculine",
            "Neuter"
          ],
          "type": "string",
          "enum": [
            "GENDER_UNKNOWN",
            "FEMININE",
            "MASCULINE",
            "NEUTER"
          ]
        },
        "mood": {
          "description": "The grammatical mood.",
          "enumDescriptions": [
            "Mood is not applicable in the analyzed language or is not predicted.",
            "Conditional",
            "Imperative",
            "Indicative",
            "Interrogative",
            "Jussive",
            "Subjunctive"
          ],
          "type": "string",
          "enum": [
            "MOOD_UNKNOWN",
            "CONDITIONAL_MOOD",
            "IMPERATIVE",
            "INDICATIVE",
            "INTERROGATIVE",
            "JUSSIVE",
            "SUBJUNCTIVE"
          ]
        },
        "number": {
          "description": "The grammatical number.",
          "enumDescriptions": [
            "Number is not applicable in the analyzed language or is not predicted.",
            "Singular",
            "Plural",
            "Dual"
          ],
          "type": "string",
          "enum": [
            "NUMBER_UNKNOWN",
            "SINGULAR",
            "PLURAL",
            "DUAL"
          ]
        },
        "person": {
          "description": "The grammatical person.",
          "enumDescriptions": [
            "Person is not applicable in the analyzed language or is not predicted.",
            "First",
            "Second",
            "Third",
            "Reflexive"
          ],
          "type": "string",
          "enum": [
            "PERSON_UNKNOWN",
            "FIRST",
            "SECOND",
            "THIRD",
            "REFLEXIVE_PERSON"
          ]
        },
        "proper": {
          "description": "The grammatical properness.",
          "enumDescriptions": [
            "Proper is not applicable in the analyzed language or is not predicted.",
            "Proper",
            "Not proper"
          ],
          "type": "string",
          "enum": [
            "PROPER_UNKNOWN",
            "PROPER",
            "NOT_PROPER"
          ]
        },
        "reciprocity": {
          "description": "The grammatical reciprocity.",
          "enumDescriptions": [
            "Reciprocity is not applicable in the analyzed language or is not\npredicted.",
            "Reciprocal",
            "Non-reciprocal"
          ],
          "type": "string",
          "enum": [
            "RECIPROCITY_UNKNOWN",
            "RECIPROCAL",
            "NON_RECIPROCAL"
          ]
        },
        "tense": {
          "description": "The grammatical tense.",
          "enumDescriptions": [
            "Tense is not applicable in the analyzed language or is not predicted.",
            "Conditional",
            "Future",
            "Past",
            "Present",
            "Imperfect",
            "Pluperfect"
          ],
          "type": "string",
          "enum": [
            "TENSE_UNKNOWN",
            "CONDITIONAL_TENSE",
            "FUTURE",
            "PAST",
            "PRESENT",
            "IMPERFECT",
            "PLUPERFECT"
          ]
        },
        "voice": {
          "description": "The grammatical voice.",
          "enumDescriptions": [
            "Voice is not applicable in the analyzed language or is not predicted.",
            "Active",
            "Causative",
            "Passive"
          ],
          "type": "string",
          "enum": [
            "VOICE_UNKNOWN",
            "ACTIVE",
            "CAUSATIVE",
            "PASSIVE"
          ]
        }
      }
    },
    "DependencyEdge": {
      "id": "DependencyEdge",
      "description": "Represents dependency parse tree information for a token. (For more\ninformation on dependency labels, see\nhttp:\/\/www.aclweb.org\/anthology\/P13-2017",
      "type": "object",
      "properties": {
        "headTokenIndex": {
          "description": "Represents the head of this token in the dependency tree.\nThis is the index of the token which has an arc going to this token.\nThe index is the position of the token in the array of tokens returned\nby the API method. If this token is a root token, then the\n`head_token_index` is its own index.",
          "type": "integer",
          "format": "int32"
        },
        "label": {
          "description": "The parse label for the token.",
          "enumDescriptions": [
            "Unknown",
            "Abbreviation modifier",
            "Adjectival complement",
            "Adverbial clause modifier",
            "Adverbial modifier",
            "Adjectival modifier of an NP",
            "Appositional modifier of an NP",
            "Attribute dependent of a copular verb",
            "Auxiliary (non-main) verb",
            "Passive auxiliary",
            "Coordinating conjunction",
            "Clausal complement of a verb or adjective",
            "Conjunct",
            "Clausal subject",
            "Clausal passive subject",
            "Dependency (unable to determine)",
            "Determiner",
            "Discourse",
            "Direct object",
            "Expletive",
            "Goes with (part of a word in a text not well edited)",
            "Indirect object",
            "Marker (word introducing a subordinate clause)",
            "Multi-word expression",
            "Multi-word verbal expression",
            "Negation modifier",
            "Noun compound modifier",
            "Noun phrase used as an adverbial modifier",
            "Nominal subject",
            "Passive nominal subject",
            "Numeric modifier of a noun",
            "Element of compound number",
            "Punctuation mark",
            "Parataxis relation",
            "Participial modifier",
            "The complement of a preposition is a clause",
            "Object of a preposition",
            "Possession modifier",
            "Postverbal negative particle",
            "Predicate complement",
            "Preconjunt",
            "Predeterminer",
            "Prefix",
            "Prepositional modifier",
            "The relationship between a verb and verbal morpheme",
            "Particle",
            "Associative or possessive marker",
            "Quantifier phrase modifier",
            "Relative clause modifier",
            "Complementizer in relative clause",
            "Ellipsis without a preceding predicate",
            "Referent",
            "Remnant",
            "Reparandum",
            "Root",
            "Suffix specifying a unit of number",
            "Suffix",
            "Temporal modifier",
            "Topic marker",
            "Clause headed by an infinite form of the verb that modifies a noun",
            "Vocative",
            "Open clausal complement",
            "Name suffix",
            "Name title",
            "Adverbial phrase modifier",
            "Causative auxiliary",
            "Helper auxiliary",
            "Rentaishi (Prenominal modifier)",
            "Foreign words",
            "Keyword",
            "List for chains of comparable items",
            "Nominalized clause",
            "Nominalized clausal subject",
            "Nominalized clausal passive",
            "Compound of numeric modifier",
            "Copula",
            "Dislocated relation (for fronted\/topicalized elements)",
            "Aspect marker",
            "Genitive modifier",
            "Genitive object",
            "Infinitival modifier",
            "Measure",
            "Nominal complement of a noun"
          ],
          "type": "string",
          "enum": [
            "UNKNOWN",
            "ABBREV",
            "ACOMP",
            "ADVCL",
            "ADVMOD",
            "AMOD",
            "APPOS",
            "ATTR",
            "AUX",
            "AUXPASS",
            "CC",
            "CCOMP",
            "CONJ",
            "CSUBJ",
            "CSUBJPASS",
            "DEP",
            "DET",
            "DISCOURSE",
            "DOBJ",
            "EXPL",
            "GOESWITH",
            "IOBJ",
            "MARK",
            "MWE",
            "MWV",
            "NEG",
            "NN",
            "NPADVMOD",
            "NSUBJ",
            "NSUBJPASS",
            "NUM",
            "NUMBER",
            "P",
            "PARATAXIS",
            "PARTMOD",
            "PCOMP",
            "POBJ",
            "POSS",
            "POSTNEG",
            "PRECOMP",
            "PRECONJ",
            "PREDET",
            "PREF",
            "PREP",
            "PRONL",
            "PRT",
            "PS",
            "QUANTMOD",
            "RCMOD",
            "RCMODREL",
            "RDROP",
            "REF",
            "REMNANT",
            "REPARANDUM",
            "ROOT",
            "SNUM",
            "SUFF",
            "TMOD",
            "TOPIC",
            "VMOD",
            "VOCATIVE",
            "XCOMP",
            "SUFFIX",
            "TITLE",
            "ADVPHMOD",
            "AUXCAUS",
            "AUXVV",
            "DTMOD",
            "FOREIGN",
            "KW",
            "LIST",
            "NOMC",
            "NOMCSUBJ",
            "NOMCSUBJPASS",
            "NUMC",
            "COP",
            "DISLOCATED",
            "ASP",
            "GMOD",
            "GOBJ",
            "INFMOD",
            "MES",
            "NCOMP"
          ]
        }
      }
    },
    "ClassifyTextRequest": {
      "id": "ClassifyTextRequest",
      "description": "The document classification request message.",
      "type": "object",
      "properties": {
        "document": {
          "description": "Required. Input document.",
          "$ref": "Document"
        }
      }
    },
    "ClassifyTextResponse": {
      "id": "ClassifyTextResponse",
      "description": "The document classification response message.",
      "type": "object",
      "properties": {
        "categories": {
          "description": "Categories representing the input document.",
          "type": "array",
          "items": {
            "$ref": "ClassificationCategory"
          }
        }
      }
    },
    "ClassificationCategory": {
      "id": "ClassificationCategory",
      "description": "Represents a category returned from the text classifier.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the category representing the document, from the [predefined\ntaxonomy](\/natural-language\/docs\/categories).",
          "type": "string"
        },
        "confidence": {
          "description": "The classifier's confidence of the category. Number represents how certain\nthe classifier is that this category represents the given text.",
          "type": "number",
          "format": "float"
        }
      }
    },
    "AnnotateTextRequest": {
      "id": "AnnotateTextRequest",
      "description": "The request message for the text annotation API, which can perform multiple\nanalysis types (sentiment, entities, and syntax) in one call.",
      "type": "object",
      "properties": {
        "document": {
          "description": "Required. Input document.",
          "$ref": "Document"
        },
        "features": {
          "description": "Required. The enabled features.",
          "$ref": "Features"
        },
        "encodingType": {
          "description": "The encoding type used by the API to calculate offsets.",
          "enumDescriptions": [
            "If `EncodingType` is not specified, encoding-dependent information (such as\n`begin_offset`) will be set at `-1`.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-8 encoding of the input. C++ and Go are examples of languages\nthat use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-16 encoding of the input. Java and JavaScript are examples of\nlanguages that use this encoding natively.",
            "Encoding-dependent information (such as `begin_offset`) is calculated based\non the UTF-32 encoding of the input. Python is an example of a language\nthat uses this encoding natively."
          ],
          "type": "string",
          "enum": [
            "NONE",
            "UTF8",
            "UTF16",
            "UTF32"
          ]
        }
      }
    },
    "Features": {
      "id": "Features",
      "description": "All available features for sentiment, syntax, and semantic analysis.\nSetting each one to true will enable that specific analysis for the input.",
      "type": "object",
      "properties": {
        "extractSyntax": {
          "description": "Extract syntax information.",
          "type": "boolean"
        },
        "extractEntities": {
          "description": "Extract entities.",
          "type": "boolean"
        },
        "extractDocumentSentiment": {
          "description": "Extract document-level sentiment.",
          "type": "boolean"
        },
        "extractEntitySentiment": {
          "description": "Extract entities and their associated sentiment.",
          "type": "boolean"
        },
        "classifyText": {
          "description": "Classify the full document into categories.",
          "type": "boolean"
        }
      }
    },
    "AnnotateTextResponse": {
      "id": "AnnotateTextResponse",
      "description": "The text annotations response message.",
      "type": "object",
      "properties": {
        "sentences": {
          "description": "Sentences in the input document. Populated if the user enables\nAnnotateTextRequest.Features.extract_syntax.",
          "type": "array",
          "items": {
            "$ref": "Sentence"
          }
        },
        "tokens": {
          "description": "Tokens, along with their syntactic information, in the input document.\nPopulated if the user enables\nAnnotateTextRequest.Features.extract_syntax.",
          "type": "array",
          "items": {
            "$ref": "Token"
          }
        },
        "entities": {
          "description": "Entities, along with their semantic information, in the input document.\nPopulated if the user enables\nAnnotateTextRequest.Features.extract_entities.",
          "type": "array",
          "items": {
            "$ref": "Entity"
          }
        },
        "documentSentiment": {
          "description": "The overall sentiment for the document. Populated if the user enables\nAnnotateTextRequest.Features.extract_document_sentiment.",
          "$ref": "Sentiment"
        },
        "language": {
          "description": "The language of the text, which will be the same as the language specified\nin the request or, if not specified, the automatically-detected language.\nSee Document.language field for more details.",
          "type": "string"
        },
        "categories": {
          "description": "Categories identified in the input document.",
          "type": "array",
          "items": {
            "$ref": "ClassificationCategory"
          }
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https:\/\/github.com\/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https:\/\/cloud.google.com\/apis\/design\/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    }
  },
  "resources": {
    "documents": {
      "methods": {
        "analyzeSentiment": {
          "id": "language.documents.analyzeSentiment",
          "path": "v1/documents:analyzeSentiment",
          "flatPath": "v1/documents:analyzeSentiment",
          "httpMethod": "POST",
          "parameters": {
          },
          "parameterOrder": [
          ],
          "request": {
            "$ref": "AnalyzeSentimentRequest"
          },
          "response": {
            "$ref": "AnalyzeSentimentResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-language",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Analyzes the sentiment of the provided text."
        },
        "analyzeEntities": {
          "id": "language.documents.analyzeEntities",
          "path": "v1/documents:analyzeEntities",
          "flatPath": "v1/documents:analyzeEntities",
          "httpMethod": "POST",
          "parameters": {
          },
          "parameterOrder": [
          ],
          "request": {
            "$ref": "AnalyzeEntitiesRequest"
          },
          "response": {
            "$ref": "AnalyzeEntitiesResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-language",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Finds named entities (currently proper names and common nouns) in the text\nalong with entity types, salience, mentions for each entity, and\nother properties."
        },
        "analyzeEntitySentiment": {
          "id": "language.documents.analyzeEntitySentiment",
          "path": "v1/documents:analyzeEntitySentiment",
          "flatPath": "v1/documents:analyzeEntitySentiment",
          "httpMethod": "POST",
          "parameters": {
          },
          "parameterOrder": [
          ],
          "request": {
            "$ref": "AnalyzeEntitySentimentRequest"
          },
          "response": {
            "$ref": "AnalyzeEntitySentimentResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-language",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Finds entities, similar to AnalyzeEntities in the text and analyzes\nsentiment associated with each entity and its mentions."
        },
        "analyzeSyntax": {
          "id": "language.documents.analyzeSyntax",
          "path": "v1/documents:analyzeSyntax",
          "flatPath": "v1/documents:analyzeSyntax",
          "httpMethod": "POST",
          "parameters": {
          },
          "parameterOrder": [
          ],
          "request": {
            "$ref": "AnalyzeSyntaxRequest"
          },
          "response": {
            "$ref": "AnalyzeSyntaxResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-language",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Analyzes the syntax of the text and provides sentence boundaries and\ntokenization along with part of speech tags, dependency trees, and other\nproperties."
        },
        "classifyText": {
          "id": "language.documents.classifyText",
          "path": "v1/documents:classifyText",
          "flatPath": "v1/documents:classifyText",
          "httpMethod": "POST",
          "parameters": {
          },
          "parameterOrder": [
          ],
          "request": {
            "$ref": "ClassifyTextRequest"
          },
          "response": {
            "$ref": "ClassifyTextResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-language",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "Classifies a document into categories."
        },
        "annotateText": {
          "id": "language.documents.annotateText",
          "path": "v1/documents:annotateText",
          "flatPath": "v1/documents:annotateText",
          "httpMethod": "POST",
          "parameters": {
          },
          "parameterOrder": [
          ],
          "request": {
            "$ref": "AnnotateTextRequest"
          },
          "response": {
            "$ref": "AnnotateTextResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-language",
            "https://www.googleapis.com/auth/cloud-platform"
          ],
          "description": "A convenience method that provides all the features that analyzeSentiment,\nanalyzeEntities, and analyzeSyntax provide in one call."
        }
      }
    }
  },
  "basePath": ""
}