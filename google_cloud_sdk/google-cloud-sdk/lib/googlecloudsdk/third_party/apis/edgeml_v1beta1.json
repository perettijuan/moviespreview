{
  "kind": "discovery#restDescription",
  "discoveryVersion": "v1",
  "id": "edgeml:v1beta1",
  "name": "edgeml",
  "canonicalName": "Edge ML",
  "version": "v1beta1",
  "revision": "0",
  "title": "Edge ML API",
  "description": "Provides ML releated services for Cloud IoT Edge devices\n",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
   },
  "documentationLink": "https://cloud.google.com/iot-edge/",
  "protocol": "rest",
  "rootUrl": "https://edgeml.googleapis.com/",
  "servicePath": "",
  "baseUrl": "https://edgeml.googleapis.com/",
  "batchPath": "batch",
  "version_module": true,
  "fullyEncodeReservedExpansion": true,
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        },
        "https://www.googleapis.com/auth/cloudiot": {
          "description": "Register and manage devices in the Google Cloud IoT service"
        },
        "https://www.googleapis.com/auth/devstorage.read_write": {
          "description": "Manage your data in Google Cloud Storage"
        }
      }
    }
  },
  "schemas": {
    "Operation": {
      "id": "Operation",
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should be a resource name ending with `operations\/{unique_id}`.",
          "type": "string"
        },
        "metadata": {
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        },
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable.",
          "type": "boolean"
        },
        "error": {
          "description": "The error result of the operation in case of failure or cancellation.",
          "$ref": "Status"
        },
        "response": {
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`\/`Create`\/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.",
          "type": "object",
          "additionalProperties": {
            "type": "any",
            "description": "Properties of the object. Contains field @type with type URL."
          }
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https:\/\/github.com\/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https:\/\/cloud.google.com\/apis\/design\/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "AnalyzeModelRequest": {
      "id": "AnalyzeModelRequest",
      "description": "Request for `AnalyzeModel`",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "The Google Cloud Storage location of the input.",
          "$ref": "GcsSource"
        }
      }
    },
    "GcsSource": {
      "id": "GcsSource",
      "description": "The Google Cloud Storage location of the input.",
      "type": "object",
      "properties": {
        "inputUris": {
          "description": "Points to [Google Cloud Storage](https:\/\/cloud.google.com\/storage\/) URIs\ncontaining files with input content (only).\nOnly full object path is accepted, e.g. gs:\/\/bucket\/directory\/object.name\nReturns [google.rpc.Code.INVALID_ARGUMENT] for all other URI formats.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ConvertModelRequest": {
      "id": "ConvertModelRequest",
      "description": "Request for `ConvertModel`.",
      "type": "object",
      "properties": {
        "tfliteConverterVersion": {
          "description": "The version of TFLite converter to use. A version name such as \"1.12.0\" or\n\"latest\" are allowed. Currently, only \"1.12.0\" is supported. If not\nspecified, latest version will be used.",
          "type": "string"
        },
        "inputConfig": {
          "description": "Configuration specifying the input model to convert. Currently, only\nTensorFlow SavedModel is supported.",
          "$ref": "InputConfig"
        },
        "outputConfig": {
          "description": "Configuration specifying an output location for the TensorFlow Lite model.\nThe destination location specified in `output_config` must be different\nfrom the source location specified in `input_config`. The requesting user\nmust have `write` access to the output location. If a file exists in the\nspecified path, overwrites to that path.",
          "$ref": "OutputConfig"
        }
      }
    },
    "InputConfig": {
      "id": "InputConfig",
      "description": "The input content and metadata.",
      "type": "object",
      "properties": {
        "gcsSource": {
          "description": "The Google Cloud Storage location of the input.",
          "$ref": "GcsSource"
        }
      }
    },
    "OutputConfig": {
      "id": "OutputConfig",
      "description": "The desired output location and metadata.",
      "type": "object",
      "properties": {
        "gcsDestination": {
          "description": "The Google Cloud Storage location to write the output to.",
          "$ref": "GcsDestination"
        }
      }
    },
    "GcsDestination": {
      "id": "GcsDestination",
      "description": "The Google Cloud Storage location where the output should be written to.",
      "type": "object",
      "properties": {
        "outputUri": {
          "description": "The Google Cloud Storage URI where the results will be stored.\nOnly full object path is accepted, e.g. gs:\/\/bucket\/directory\/object.name\nThe result is written to this single file.",
          "type": "string"
        }
      }
    },
    "CompileModelRequest": {
      "id": "CompileModelRequest",
      "description": "Request for `CompileModel`. Will be served in\n`google.longrunning.Operation.result.response`",
      "type": "object",
      "properties": {
        "chipType": {
          "description": "The target chip type.",
          "enumDescriptions": [
            "Default: not specified.",
            "Version 1 of the Edge TPU."
          ],
          "type": "string",
          "enum": [
            "CHIP_TYPE_UNSPECIFIED",
            "EDGE_TPU_V1"
          ]
        },
        "minRuntimeVersion": {
          "description": "The required minimum version of Edge TPU runtime. A version name such as\n\"1.0.0\" or \"latest\" are allowed.",
          "type": "string"
        },
        "inputConfig": {
          "description": "Configuration specifying the input model to compile. Currently, only\nTensorFlow Lite is supported. The requesting user must have `read` access\nto the input location.",
          "$ref": "InputConfig"
        },
        "outputConfig": {
          "description": "Configuration specifying an output location for the compiled TensorFlow\nLite model. The destination location specified in `output_config` must be\ndifferent from the source location specified in `input_config`. The\nrequesting user must have `write` access to the output location. If a file\nexists in the specified path, overwrites to that path.",
          "$ref": "OutputConfig"
        }
      }
    },
    "AnalyzeModelResponse": {
      "id": "AnalyzeModelResponse",
      "description": "Response for `AnalyzeModel`. Will be served in\n`google.longrunning.Operation.result.response`",
      "type": "object",
      "properties": {
        "modelType": {
          "description": "Model type of the input file.",
          "enumDescriptions": [
            "Default: not specified.",
            "TensorFlow Lite model (not optimized for Edge TPU).",
            "TensorFlow Lite model optimized for Edge TPU.",
            "TensorFlow SavedModel.",
            "Non-TensorFlow model. Currently, only scikit-learn is supported.",
            "Unknown format."
          ],
          "type": "string",
          "enum": [
            "MODEL_TYPE_UNSPECIFIED",
            "TENSORFLOW_LITE",
            "TENSORFLOW_LITE_EDGE_TPU_OPTIMIZED",
            "TENSORFLOW_SAVED_MODEL",
            "NON_TENSORFLOW_MODEL",
            "UNKNOWN_FORMAT"
          ]
        },
        "modelSignature": {
          "description": "The information of input and output vectors of the model, if available.\nWill be set only if model_type is TFLite or TFLite optimized for Edge TPU.",
          "$ref": "ModelSignature"
        },
        "edgeTpuCompilability": {
          "description": "Indicates if the file can be compiled to Edge TPU optimized TFLite model\nfile by the latest version Edge TPU compiler.",
          "$ref": "EdgeTpuCompilability"
        },
        "additionalMessage": {
          "description": "Informative message, if any.",
          "type": "string"
        }
      }
    },
    "ModelSignature": {
      "id": "ModelSignature",
      "description": "Describes the signature of a TensorFlow model.",
      "type": "object",
      "properties": {
        "inputTensors": {
          "description": "Info of the input tensors.",
          "type": "array",
          "items": {
            "$ref": "TensorRef"
          }
        },
        "outputTensors": {
          "description": "Info of the output tensors.",
          "type": "array",
          "items": {
            "$ref": "TensorRef"
          }
        }
      }
    },
    "TensorRef": {
      "id": "TensorRef",
      "description": "Information about a tensor including its index.",
      "type": "object",
      "properties": {
        "index": {
          "description": "Index of the tensor in the input or output layer.",
          "type": "integer",
          "format": "int32"
        },
        "tensorInfo": {
          "description": "Information about the tensor.",
          "$ref": "TensorInfo"
        }
      }
    },
    "TensorInfo": {
      "id": "TensorInfo",
      "description": "Information about a tensor.",
      "type": "object",
      "properties": {
        "tensorName": {
          "description": "Name of the tensor.",
          "type": "string"
        },
        "dimensions": {
          "description": "Dimension description of the tensor.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "inferenceType": {
          "description": "Type of the tensor.",
          "enumDescriptions": [
            "Default: unspecified.",
            "Quantized unsigned 8-bit integer.",
            "32-bit floating point values."
          ],
          "type": "string",
          "enum": [
            "INFERENCE_TYPE_UNSPECIFIED",
            "QUANTIZED_UINT_8",
            "FLOAT_32"
          ]
        }
      }
    },
    "EdgeTpuCompilability": {
      "id": "EdgeTpuCompilability",
      "description": "Indicates if the TFLite model can be compiled to Edge TPU optimized TFLite\nmodel.",
      "type": "object",
      "properties": {
        "compilableReason": {
          "description": "If set, the model can be compiled. If the value is not `COMPILABLE`,\ncompiler might emit an warning message.",
          "enumDescriptions": [
            "Default: unspecified",
            "The model can be compiled to Edge TPU optimized TFLite model.",
            "The model can be compiled to Edge TPU optimized TFLite model, but has an\nunverified architecture. Compiler might emit an warning message."
          ],
          "type": "string",
          "enum": [
            "COMPILABLE_REASON_UNSPECIFIED",
            "COMPILABLE",
            "UNVERIFIED_ARCHITECTURE"
          ]
        },
        "uncompilableReason": {
          "description": "If set, the model cannot be compiled.",
          "enumDescriptions": [
            "Default: unspecified",
            "Only TensorFlow Lite models can be compiled.",
            "The model cannot be compiled since it is not quantized.",
            "The model cannot be compiled since it is too big.",
            "The model cannot be compiled since it is already compiled."
          ],
          "type": "string",
          "enum": [
            "UNCOMPILABLE_REASON_UNSPECIFIED",
            "NON_TENSORFLOW_LITE",
            "NON_QUANTIZED_MODEL",
            "INPUT_TOO_LARGE",
            "ALREADY_COMPILED"
          ]
        },
        "additionalMessage": {
          "description": "An informative message, if any.",
          "type": "string"
        }
      }
    },
    "CompileModelResponse": {
      "id": "CompileModelResponse",
      "description": "Response for `CompileModel`. Will be served in\n`google.longrunning.Operation.result.response`",
      "type": "object",
      "properties": {
        "compileDuration": {
          "description": "How long did it take to finish the compilation.",
          "type": "string",
          "format": "google-duration"
        },
        "fileSizeBytes": {
          "description": "Size(in bytes) of the compiled file.",
          "type": "string",
          "format": "int64"
        },
        "modelSignature": {
          "description": "The information of input and output vectors of the compiled model.",
          "$ref": "ModelSignature"
        },
        "additionalMessage": {
          "description": "Additional message, if any. For example, warning messages emitted while\ncompiling.",
          "type": "string"
        },
        "compilationReport": {
          "description": "Detailed information of the compilation. Even if the compilation succeeded,\nthe model might only be compiled partially.",
          "$ref": "CompilationReport"
        }
      }
    },
    "CompilationReport": {
      "id": "CompilationReport",
      "description": "Detailed information about the compilation.",
      "type": "object",
      "properties": {
        "compilerVersion": {
          "description": "The version of the compiler used, e.g. \"0.14.3\".",
          "type": "string"
        },
        "tpuSubgraphCount": {
          "description": "Number of subgraphs in the generated TFLite.",
          "type": "integer",
          "format": "int32"
        },
        "opConversionStats": {
          "description": "Conversion histogram per opcode.",
          "type": "array",
          "items": {
            "$ref": "OpConversionStats"
          }
        },
        "conversionResults": {
          "description": "Conversion result per layer\/operation, in the same order in which the\noperators are serialized in the input TFLite file.",
          "enumDescriptions": [
            "Default: not specified.",
            "Mapped to Edge TPU.",
            "Could have been mapped, but skipped to prevent small sub-graphs.",
            "Unsupported op.",
            "Could not be mapped due to an unspecified limitation other than the\nlimitations listed below.",
            "Op is given an unsupported data type.",
            "Tensor has unsupported rank. Currently only up to 3 innermost dimensions\nare supported.",
            "A layer may not support the given fused activation function.",
            "Filter or bias were not compile-time bound.",
            "Operation not supported because it operates in batch dimension. For\nexample, a fully-connected or softmax layer with 2d output.",
            "Mean and Pad layers can't operate along z-dimension.",
            "Unsupported weights format for fully-connected layers.",
            "Too many elements for softmax. Softmax currently supports up to 16000\nelements.",
            "Strided-Slice is not supported unless it is with unitary strides, i.e.\nStrided-Slice is supported only if it is effectively a simple Stride\noperation.",
            "Non-zero ellipsis-mask or new-axis-mask is not supported on Strided-Slice\nlayers.",
            "Image-interpolation layers that wouldn't run precisely enough on TPU."
          ],
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CONVERSION_RESULT_UNSPECIFIED",
              "SUCCEEDED",
              "FAILED_PARTITIONING",
              "FAILED_UNSUPPORTED_OP",
              "FAILED_OTHER_LIMITATION",
              "FAILED_UNSUPPORTED_DATA_TYPE",
              "FAILED_UNSUPPORTED_RANK",
              "FAILED_UNSUPPORTED_ACTIVATION_FUNCTION",
              "FAILED_NON_CONSTANT_PARAMETERS",
              "FAILED_OPERATING_IN_BATCH",
              "FAILED_OPERATING_IN_Z",
              "FAILED_FULLY_CONNECTED_WEIGHTS_FORMAT",
              "FAILED_SOFTMAX_EXCEEDS_MAX_SIZE",
              "FAILED_STRIDED_SLICE_NON_UNITARY_STRIDES",
              "FAILED_STRIDED_SLICE_NON_ZERO_ELLIPSIS_OR_NEW_AXIS_MASK",
              "FAILED_IMPRECISE_SAMPLING"
            ]
          }
        },
        "subgraphStats": {
          "description": "Conversion statistics for each subgraph.",
          "type": "array",
          "items": {
            "$ref": "SubgraphConversionStats"
          }
        }
      }
    },
    "OpConversionStats": {
      "id": "OpConversionStats",
      "description": "Compilation statistics per op.",
      "type": "object",
      "properties": {
        "opcode": {
          "description": "Opcode. See\nhttps:\/\/github.com\/tensorflow\/tensorflow\/blob\/master\/tensorflow\/lite\/builtin_ops.h\nfor the list of TFLite builtin opcodes.",
          "type": "integer",
          "format": "int32"
        },
        "conversionResult": {
          "description": "Conversion result of the op.",
          "enumDescriptions": [
            "Default: not specified.",
            "Mapped to Edge TPU.",
            "Could have been mapped, but skipped to prevent small sub-graphs.",
            "Unsupported op.",
            "Could not be mapped due to an unspecified limitation other than the\nlimitations listed below.",
            "Op is given an unsupported data type.",
            "Tensor has unsupported rank. Currently only up to 3 innermost dimensions\nare supported.",
            "A layer may not support the given fused activation function.",
            "Filter or bias were not compile-time bound.",
            "Operation not supported because it operates in batch dimension. For\nexample, a fully-connected or softmax layer with 2d output.",
            "Mean and Pad layers can't operate along z-dimension.",
            "Unsupported weights format for fully-connected layers.",
            "Too many elements for softmax. Softmax currently supports up to 16000\nelements.",
            "Strided-Slice is not supported unless it is with unitary strides, i.e.\nStrided-Slice is supported only if it is effectively a simple Stride\noperation.",
            "Non-zero ellipsis-mask or new-axis-mask is not supported on Strided-Slice\nlayers.",
            "Image-interpolation layers that wouldn't run precisely enough on TPU."
          ],
          "type": "string",
          "enum": [
            "CONVERSION_RESULT_UNSPECIFIED",
            "SUCCEEDED",
            "FAILED_PARTITIONING",
            "FAILED_UNSUPPORTED_OP",
            "FAILED_OTHER_LIMITATION",
            "FAILED_UNSUPPORTED_DATA_TYPE",
            "FAILED_UNSUPPORTED_RANK",
            "FAILED_UNSUPPORTED_ACTIVATION_FUNCTION",
            "FAILED_NON_CONSTANT_PARAMETERS",
            "FAILED_OPERATING_IN_BATCH",
            "FAILED_OPERATING_IN_Z",
            "FAILED_FULLY_CONNECTED_WEIGHTS_FORMAT",
            "FAILED_SOFTMAX_EXCEEDS_MAX_SIZE",
            "FAILED_STRIDED_SLICE_NON_UNITARY_STRIDES",
            "FAILED_STRIDED_SLICE_NON_ZERO_ELLIPSIS_OR_NEW_AXIS_MASK",
            "FAILED_IMPRECISE_SAMPLING"
          ]
        },
        "count": {
          "description": "Number of ops.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SubgraphConversionStats": {
      "id": "SubgraphConversionStats",
      "description": "The status of the conversion of the subgraph",
      "type": "object",
      "properties": {
        "mappedOpIndices": {
          "description": "Operators mapped to the EdgeTPU subgraph, represented by their index\n(the serialization order in the input TFLite file).",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "ConvertModelResponse": {
      "id": "ConvertModelResponse",
      "description": "Response for `ConvertModel`.",
      "type": "object",
      "properties": {
        "convertDuration": {
          "description": "How long did it take to finish the conversion",
          "type": "string",
          "format": "google-duration"
        },
        "fileSizeBytes": {
          "description": "Size(in bytes) of the converted file",
          "type": "string",
          "format": "int64"
        },
        "tfliteConverterVersion": {
          "description": "The version of the converter used, e.g. \"1.12.0\". If not specified, latest\nversion will be used.",
          "type": "string"
        },
        "modelSignature": {
          "description": "The information of input and output vectors of the compiled model.",
          "$ref": "ModelSignature"
        },
        "edgeTpuCompilability": {
          "description": "Indicates if the file can be compiled to Edge TPU optimized TFLite model\nfile by the latest version Edge TPU compiler.",
          "$ref": "EdgeTpuCompilability"
        },
        "additionalMessage": {
          "description": "Informative message, if any. For example, it can be warning messages from\nconverter.",
          "type": "string"
        }
      }
    },
    "AnalyzeOperationMetadata": {
      "id": "AnalyzeOperationMetadata",
      "description": "Metadata that will be used in google.longrunning.Operation of `AnalyzeModel`\nrequest. Indicates the current state of the `AnalyzeModel` operation.",
      "type": "object",
      "properties": {
        "state": {
          "description": "State of the operation.",
          "enumDescriptions": [
            "Default: not specified.",
            "In queue, waiting for the process.",
            "In progress.",
            "The operation has been done successfully.",
            "The operation has been failed."
          ],
          "type": "string",
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "PENDING",
            "IN_PROGRESS",
            "SUCCEEDED",
            "FAILED"
          ]
        },
        "startTime": {
          "description": "Indicates when the operation started, according to the server time.",
          "type": "string",
          "format": "google-datetime"
        },
        "elapsedDuration": {
          "description": "Indicates how long has been elapsed since the operation started, according\nto the server time.",
          "type": "string",
          "format": "google-duration"
        },
        "additionalMessage": {
          "description": "Informative message, if any.",
          "type": "string"
        }
      }
    },
    "CompileOperationMetadata": {
      "id": "CompileOperationMetadata",
      "description": "Metadata that will be used in google.longrunning.Operation of `CompileModel`\nrequest. Indicates the current state of the `CompileModel` operation.",
      "type": "object",
      "properties": {
        "state": {
          "description": "State of the operation.",
          "enumDescriptions": [
            "Default: not specified.",
            "In queue, waiting for the process.",
            "In progress.",
            "The operation has been done successfully.",
            "The operation has been failed."
          ],
          "type": "string",
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "PENDING",
            "IN_PROGRESS",
            "SUCCEEDED",
            "FAILED"
          ]
        },
        "startTime": {
          "description": "Indicates when the operation started, according to the server time.",
          "type": "string",
          "format": "google-datetime"
        },
        "elapsedDuration": {
          "description": "Indicates how long has been elapsed since the operation started, according\nto the server time.",
          "type": "string",
          "format": "google-duration"
        },
        "additionalMessage": {
          "description": "Informative message, e.g. log messages emitted by Edge TPU compiler.",
          "type": "string"
        }
      }
    },
    "ConvertOperationMetadata": {
      "id": "ConvertOperationMetadata",
      "description": "Metadata that will be used in google.longrunning.Operation of `ConvertModel`\nrequest. Indicates the current state of the `ConvertModel` operation.",
      "type": "object",
      "properties": {
        "state": {
          "description": "State of the operation.",
          "enumDescriptions": [
            "Default: not specified.",
            "In queue, waiting for the process.",
            "In progress.",
            "The operation has been done successfully.",
            "The operation has been failed."
          ],
          "type": "string",
          "enum": [
            "OPERATION_STATE_UNSPECIFIED",
            "PENDING",
            "IN_PROGRESS",
            "SUCCEEDED",
            "FAILED"
          ]
        },
        "startTime": {
          "description": "Indicates when the operation started, according to the server time.",
          "type": "string",
          "format": "google-datetime"
        },
        "elapsedDuration": {
          "description": "Indicates how long has been elapsed since the operation started, according\nto the server time.",
          "type": "string",
          "format": "google-duration"
        },
        "additionalMessage": {
          "description": "Informative message, if any.",
          "type": "string"
        }
      }
    }
  },
  "resources": {
    "operations": {
      "methods": {
        "get": {
          "id": "edgeml.operations.get",
          "path": "v1beta1/{+name}",
          "flatPath": "v1beta1/operations/{operationsId}",
          "httpMethod": "GET",
          "parameters": {
            "name": {
              "description": "The name of the operation resource.",
              "location": "path",
              "required": true,
              "pattern": "^operations\/.+$",
              "type": "string"
            }
          },
          "parameterOrder": [
            "name"
          ],
          "response": {
            "$ref": "Operation"
          },
          "scopes": [
            "https://www.googleapis.com/auth/cloud-platform",
            "https://www.googleapis.com/auth/cloudiot",
            "https://www.googleapis.com/auth/devstorage.read_write"
          ],
          "description": "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice."
        }
      }
    },
    "projects": {
      "resources": {
        "models": {
          "methods": {
            "analyze": {
              "id": "edgeml.projects.models.analyze",
              "path": "v1beta1/{+project}/models:analyze",
              "flatPath": "v1beta1/projects/{projectsId}/models:analyze",
              "httpMethod": "POST",
              "parameters": {
                "project": {
                  "description": "The project name, e.g. \"projects\/project_123\"",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "project"
              ],
              "request": {
                "$ref": "AnalyzeModelRequest"
              },
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloudiot",
                "https://www.googleapis.com/auth/devstorage.read_write"
              ],
              "description": "Takes as input a file and returns information about the file. The result\nof the Operation will be `AnalyzeModelResponse` if successful. If the given\nfile is in an unknown format, the operation will succeed and\n`Operation.result` will have a `response` with `model_type` of\n`UNKNOWN_FORMAT`. If the given file is bigger than 100 MB, the operation\nwill fail and the `Operation.result` will be an `INVALID_ARGUMENT` error."
            },
            "convert": {
              "id": "edgeml.projects.models.convert",
              "path": "v1beta1/{+project}/models:convert",
              "flatPath": "v1beta1/projects/{projectsId}/models:convert",
              "httpMethod": "POST",
              "parameters": {
                "project": {
                  "description": "The project name, e.g. \"projects\/project_123\"",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "project"
              ],
              "request": {
                "$ref": "ConvertModelRequest"
              },
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloudiot",
                "https://www.googleapis.com/auth/devstorage.read_write"
              ],
              "description": "Converts the input to a TensorFlow Lite model. Currently, the input must be\na TensorFlow SavedModel directory or \"saved_model.pb\" or\n\"saved_model.pbtxt\" file in the SavedModel directory. If the input model is\npre-quantized, it will generate a quantized TFLite model, that can be\ncompiled. If the input model is not quantized, the generated TFLite model\nwill also be non-quantized (and therefore unable to be compiled). Note that\nthis API method does not compile the file to a TPU-optimized TensorFlow\nLite model; use `CompileModel` API to do that compilation. The result of\nthe Operation will be `ConvertModelResponse` if successful."
            },
            "compile": {
              "id": "edgeml.projects.models.compile",
              "path": "v1beta1/{+project}/models:compile",
              "flatPath": "v1beta1/projects/{projectsId}/models:compile",
              "httpMethod": "POST",
              "parameters": {
                "project": {
                  "description": "The project name, e.g. \"projects\/project_123\"",
                  "location": "path",
                  "required": true,
                  "pattern": "^projects\/[^\/]+$",
                  "type": "string"
                }
              },
              "parameterOrder": [
                "project"
              ],
              "request": {
                "$ref": "CompileModelRequest"
              },
              "response": {
                "$ref": "Operation"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform",
                "https://www.googleapis.com/auth/cloudiot",
                "https://www.googleapis.com/auth/devstorage.read_write"
              ],
              "description": "Compiles the input to a TPU-optimized TensorFlow Lite model. Currently, the\ninput must be a pre-quantized TensorFlow Lite model. The result of the\nOperation will be `CompileModelResponse` if successful. Even if the input\nmodel has a structure that is not officially verified, compilation will\nsucceed, but with a warning message in\n`CompileModelResponse.additional_message`."
            }
          }
        }
      }
    }
  },
  "basePath": ""
}