apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        buildConfigField 'String', 'API_KEY', '"eddf6980a6d7dadd72386f55f94ab571"'
        buildConfigField 'String', 'API_ENDPOINT', '"https://api.themoviedb.org/3/"'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    kotlinOptions{
        jvmTarget = '1.8'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    // Kotlin standard libs -> DO NOT leak dependency
    implementation deps.kotlin.stdlib

    // Common module -> DO NOT leak dependency
    implementation project(path: ':mpcommon')
    implementation project(path: ':mpdomain')

    // Retrofit
    def retrofit_version = '2.3.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.0.2'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'

    // ViewModel and LiveData
    implementation deps.androidx.lifecycle.extensions
    kapt deps.androidx.lifecycle.compiler

    // Room persistence
    implementation deps.androidx.room.runtime
    kapt deps.androidx.room.compiler

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation deps.test.junit5.jupiter.api         // <-- allows running JUnit5 tests
    testImplementation deps.test.junit5.jupiter.params      // <-- allows running JUnit5 parameterized tests
    testRuntimeOnly deps.test.junit5.jupiter.engine         // <-- allows running JUnit5 tests
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation deps.test.mockk.unit

    // Include testing utils
    testImplementation project(path: ':mptestutils')
}



afterEvaluate {
    project.tasks.withType(Test).forEach { t ->
        t.useJUnitPlatform()    // <-- specify to gradle that we want to run tests on JUnit5 platform
    }
}